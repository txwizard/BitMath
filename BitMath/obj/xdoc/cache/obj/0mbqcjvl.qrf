id: WizardWrx.BitMath
language: CSharp
name:
  Default: WizardWrx.BitMath
qualifiedName:
  Default: WizardWrx.BitMath
type: Assembly
modifiers: {}
items:
- id: WizardWrx
  commentId: N:WizardWrx
  language: CSharp
  name:
    CSharp: WizardWrx
    VB: WizardWrx
  nameWithType:
    CSharp: WizardWrx
    VB: WizardWrx
  qualifiedName:
    CSharp: WizardWrx
    VB: WizardWrx
  type: Namespace
  assemblies:
  - WizardWrx.BitMath
  modifiers: {}
  items:
  - id: WizardWrx.BCLIntegerTypeInfo
    commentId: T:WizardWrx.BCLIntegerTypeInfo
    language: CSharp
    name:
      CSharp: BCLIntegerTypeInfo
      VB: BCLIntegerTypeInfo
    nameWithType:
      CSharp: BCLIntegerTypeInfo
      VB: BCLIntegerTypeInfo
    qualifiedName:
      CSharp: WizardWrx.BCLIntegerTypeInfo
      VB: WizardWrx.BCLIntegerTypeInfo
    type: Class
    assemblies:
    - WizardWrx.BitMath
    namespace: WizardWrx
    source:
      id: BCLIntegerTypeInfo
      path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BCLIntegerTypeInfo.cs
      startLine: 88
    summary: "\nInstances of this type are built into the program as a static read-only\narray, which is incorporated into the static BitHelpers class for use by\nits static methods, all of which are internal to this assembly.\n"
    example: []
    syntax:
      content:
        CSharp: public class BCLIntegerTypeInfo
        VB: Public Class BCLIntegerTypeInfo
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.BCLIntegerTypeInfo.Equals(System.Object)
      commentId: M:WizardWrx.BCLIntegerTypeInfo.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: BCLIntegerTypeInfo.Equals(Object)
        VB: BCLIntegerTypeInfo.Equals(Object)
      qualifiedName:
        CSharp: WizardWrx.BCLIntegerTypeInfo.Equals(System.Object)
        VB: WizardWrx.BCLIntegerTypeInfo.Equals(System.Object)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Equals
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BCLIntegerTypeInfo.cs
        startLine: 275
      summary: "\nThis method overrides the Equal method on System.Object by\nevaluating the compact GUID strings if the other comparand is a\nBCLIntegerTypeInfo. In all other cases, this method returns FALSE.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
          description: "\nSpecify another BCLIntegerTypeInfo instance. A null reference or one\nto any other type is meaningless, and is covered by returning FALSE.\n"
        return:
          type: System.Boolean
          description: "\nThis method returns TRUE when both instances have identical BCLType\nproperties. Otherwise, the return value is FALSE.\n"
      overload: WizardWrx.BCLIntegerTypeInfo.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: WizardWrx.BCLIntegerTypeInfo.GetHashCode
      commentId: M:WizardWrx.BCLIntegerTypeInfo.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: BCLIntegerTypeInfo.GetHashCode()
        VB: BCLIntegerTypeInfo.GetHashCode()
      qualifiedName:
        CSharp: WizardWrx.BCLIntegerTypeInfo.GetHashCode()
        VB: WizardWrx.BCLIntegerTypeInfo.GetHashCode()
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: GetHashCode
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BCLIntegerTypeInfo.cs
        startLine: 304
      summary: "\nThis method overrides the default GetHashCode implementation in the\nbase class by substituting the hash code of its BCLType property.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: "\nThe return value is the hash code of the BCLType property of the\ninstance.\n"
      overload: WizardWrx.BCLIntegerTypeInfo.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: WizardWrx.BCLIntegerTypeInfo.ToString
      commentId: M:WizardWrx.BCLIntegerTypeInfo.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: BCLIntegerTypeInfo.ToString()
        VB: BCLIntegerTypeInfo.ToString()
      qualifiedName:
        CSharp: WizardWrx.BCLIntegerTypeInfo.ToString()
        VB: WizardWrx.BCLIntegerTypeInfo.ToString()
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: ToString
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BCLIntegerTypeInfo.cs
        startLine: 319
      summary: "\nThis method overrides the default ToString method on System.Object\nto deliver a compact rendering of the properties of the instance.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: "\nThe return value is a compact formatted rendering of every property\nof the instance, including the raw GUID, which is extracted from the\nSystem.Type reference stored in the instance.\n"
      overload: WizardWrx.BCLIntegerTypeInfo.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
  - id: WizardWrx.BitArray32
    commentId: T:WizardWrx.BitArray32
    language: CSharp
    name:
      CSharp: BitArray32
      VB: BitArray32
    nameWithType:
      CSharp: BitArray32
      VB: BitArray32
    qualifiedName:
      CSharp: WizardWrx.BitArray32
      VB: WizardWrx.BitArray32
    type: Class
    assemblies:
    - WizardWrx.BitMath
    namespace: WizardWrx
    source:
      id: BitArray32
      path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
      startLine: 110
    summary: "\nThis object exposes properties and methods to simplify using masks of up\nto 32 bits in day to day programming.\n"
    example: []
    syntax:
      content:
        CSharp: public class BitArray32
        VB: Public Class BitArray32
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.BitArray32.BIT_01
      commentId: F:WizardWrx.BitArray32.BIT_01
      language: CSharp
      name:
        CSharp: BIT_01
        VB: BIT_01
      nameWithType:
        CSharp: BitArray32.BIT_01
        VB: BitArray32.BIT_01
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_01
        VB: WizardWrx.BitArray32.BIT_01
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_01
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 198
      summary: "\nBit 1\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_01 = 1U
          VB: Public Const BIT_01 As UInteger = 1UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_02
      commentId: F:WizardWrx.BitArray32.BIT_02
      language: CSharp
      name:
        CSharp: BIT_02
        VB: BIT_02
      nameWithType:
        CSharp: BitArray32.BIT_02
        VB: BitArray32.BIT_02
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_02
        VB: WizardWrx.BitArray32.BIT_02
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_02
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 203
      summary: "\nBit 2\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_02 = 2U
          VB: Public Const BIT_02 As UInteger = 2UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_03
      commentId: F:WizardWrx.BitArray32.BIT_03
      language: CSharp
      name:
        CSharp: BIT_03
        VB: BIT_03
      nameWithType:
        CSharp: BitArray32.BIT_03
        VB: BitArray32.BIT_03
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_03
        VB: WizardWrx.BitArray32.BIT_03
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_03
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 208
      summary: "\nBit 3\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_03 = 4U
          VB: Public Const BIT_03 As UInteger = 4UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_04
      commentId: F:WizardWrx.BitArray32.BIT_04
      language: CSharp
      name:
        CSharp: BIT_04
        VB: BIT_04
      nameWithType:
        CSharp: BitArray32.BIT_04
        VB: BitArray32.BIT_04
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_04
        VB: WizardWrx.BitArray32.BIT_04
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_04
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 213
      summary: "\nBit 4\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_04 = 8U
          VB: Public Const BIT_04 As UInteger = 8UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_05
      commentId: F:WizardWrx.BitArray32.BIT_05
      language: CSharp
      name:
        CSharp: BIT_05
        VB: BIT_05
      nameWithType:
        CSharp: BitArray32.BIT_05
        VB: BitArray32.BIT_05
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_05
        VB: WizardWrx.BitArray32.BIT_05
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_05
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 218
      summary: "\nBit 5\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_05 = 16U
          VB: Public Const BIT_05 As UInteger = 16UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_06
      commentId: F:WizardWrx.BitArray32.BIT_06
      language: CSharp
      name:
        CSharp: BIT_06
        VB: BIT_06
      nameWithType:
        CSharp: BitArray32.BIT_06
        VB: BitArray32.BIT_06
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_06
        VB: WizardWrx.BitArray32.BIT_06
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_06
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 223
      summary: "\nBit 6\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_06 = 32U
          VB: Public Const BIT_06 As UInteger = 32UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_07
      commentId: F:WizardWrx.BitArray32.BIT_07
      language: CSharp
      name:
        CSharp: BIT_07
        VB: BIT_07
      nameWithType:
        CSharp: BitArray32.BIT_07
        VB: BitArray32.BIT_07
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_07
        VB: WizardWrx.BitArray32.BIT_07
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_07
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 228
      summary: "\nBit 7\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_07 = 64U
          VB: Public Const BIT_07 As UInteger = 64UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_08
      commentId: F:WizardWrx.BitArray32.BIT_08
      language: CSharp
      name:
        CSharp: BIT_08
        VB: BIT_08
      nameWithType:
        CSharp: BitArray32.BIT_08
        VB: BitArray32.BIT_08
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_08
        VB: WizardWrx.BitArray32.BIT_08
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_08
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 233
      summary: "\nBit 8\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_08 = 128U
          VB: Public Const BIT_08 As UInteger = 128UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_09
      commentId: F:WizardWrx.BitArray32.BIT_09
      language: CSharp
      name:
        CSharp: BIT_09
        VB: BIT_09
      nameWithType:
        CSharp: BitArray32.BIT_09
        VB: BitArray32.BIT_09
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_09
        VB: WizardWrx.BitArray32.BIT_09
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_09
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 238
      summary: "\nBit 9\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_09 = 256U
          VB: Public Const BIT_09 As UInteger = 256UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_10
      commentId: F:WizardWrx.BitArray32.BIT_10
      language: CSharp
      name:
        CSharp: BIT_10
        VB: BIT_10
      nameWithType:
        CSharp: BitArray32.BIT_10
        VB: BitArray32.BIT_10
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_10
        VB: WizardWrx.BitArray32.BIT_10
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_10
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 243
      summary: "\nBit 10\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_10 = 512U
          VB: Public Const BIT_10 As UInteger = 512UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_11
      commentId: F:WizardWrx.BitArray32.BIT_11
      language: CSharp
      name:
        CSharp: BIT_11
        VB: BIT_11
      nameWithType:
        CSharp: BitArray32.BIT_11
        VB: BitArray32.BIT_11
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_11
        VB: WizardWrx.BitArray32.BIT_11
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_11
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 248
      summary: "\nBit 11\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_11 = 1024U
          VB: Public Const BIT_11 As UInteger = 1024UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_12
      commentId: F:WizardWrx.BitArray32.BIT_12
      language: CSharp
      name:
        CSharp: BIT_12
        VB: BIT_12
      nameWithType:
        CSharp: BitArray32.BIT_12
        VB: BitArray32.BIT_12
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_12
        VB: WizardWrx.BitArray32.BIT_12
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_12
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 253
      summary: "\nBit 12\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_12 = 2048U
          VB: Public Const BIT_12 As UInteger = 2048UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_13
      commentId: F:WizardWrx.BitArray32.BIT_13
      language: CSharp
      name:
        CSharp: BIT_13
        VB: BIT_13
      nameWithType:
        CSharp: BitArray32.BIT_13
        VB: BitArray32.BIT_13
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_13
        VB: WizardWrx.BitArray32.BIT_13
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_13
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 258
      summary: "\nBit 13\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_13 = 4096U
          VB: Public Const BIT_13 As UInteger = 4096UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_14
      commentId: F:WizardWrx.BitArray32.BIT_14
      language: CSharp
      name:
        CSharp: BIT_14
        VB: BIT_14
      nameWithType:
        CSharp: BitArray32.BIT_14
        VB: BitArray32.BIT_14
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_14
        VB: WizardWrx.BitArray32.BIT_14
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_14
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 263
      summary: "\nBit 14\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_14 = 8192U
          VB: Public Const BIT_14 As UInteger = 8192UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_15
      commentId: F:WizardWrx.BitArray32.BIT_15
      language: CSharp
      name:
        CSharp: BIT_15
        VB: BIT_15
      nameWithType:
        CSharp: BitArray32.BIT_15
        VB: BitArray32.BIT_15
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_15
        VB: WizardWrx.BitArray32.BIT_15
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_15
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 268
      summary: "\nBit 15\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_15 = 16384U
          VB: Public Const BIT_15 As UInteger = 16384UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_16
      commentId: F:WizardWrx.BitArray32.BIT_16
      language: CSharp
      name:
        CSharp: BIT_16
        VB: BIT_16
      nameWithType:
        CSharp: BitArray32.BIT_16
        VB: BitArray32.BIT_16
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_16
        VB: WizardWrx.BitArray32.BIT_16
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_16
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 273
      summary: "\nBit 16\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_16 = 32768U
          VB: Public Const BIT_16 As UInteger = 32768UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_17
      commentId: F:WizardWrx.BitArray32.BIT_17
      language: CSharp
      name:
        CSharp: BIT_17
        VB: BIT_17
      nameWithType:
        CSharp: BitArray32.BIT_17
        VB: BitArray32.BIT_17
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_17
        VB: WizardWrx.BitArray32.BIT_17
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_17
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 278
      summary: "\nBit 17\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_17 = 65536U
          VB: Public Const BIT_17 As UInteger = 65536UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_18
      commentId: F:WizardWrx.BitArray32.BIT_18
      language: CSharp
      name:
        CSharp: BIT_18
        VB: BIT_18
      nameWithType:
        CSharp: BitArray32.BIT_18
        VB: BitArray32.BIT_18
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_18
        VB: WizardWrx.BitArray32.BIT_18
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_18
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 283
      summary: "\nBit 18\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_18 = 131072U
          VB: Public Const BIT_18 As UInteger = 131072UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_19
      commentId: F:WizardWrx.BitArray32.BIT_19
      language: CSharp
      name:
        CSharp: BIT_19
        VB: BIT_19
      nameWithType:
        CSharp: BitArray32.BIT_19
        VB: BitArray32.BIT_19
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_19
        VB: WizardWrx.BitArray32.BIT_19
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_19
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 288
      summary: "\nBit 19\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_19 = 262144U
          VB: Public Const BIT_19 As UInteger = 262144UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_20
      commentId: F:WizardWrx.BitArray32.BIT_20
      language: CSharp
      name:
        CSharp: BIT_20
        VB: BIT_20
      nameWithType:
        CSharp: BitArray32.BIT_20
        VB: BitArray32.BIT_20
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_20
        VB: WizardWrx.BitArray32.BIT_20
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_20
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 293
      summary: "\nBit 20\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_20 = 524288U
          VB: Public Const BIT_20 As UInteger = 524288UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_21
      commentId: F:WizardWrx.BitArray32.BIT_21
      language: CSharp
      name:
        CSharp: BIT_21
        VB: BIT_21
      nameWithType:
        CSharp: BitArray32.BIT_21
        VB: BitArray32.BIT_21
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_21
        VB: WizardWrx.BitArray32.BIT_21
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_21
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 298
      summary: "\nBit 21\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_21 = 1048576U
          VB: Public Const BIT_21 As UInteger = 1048576UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_22
      commentId: F:WizardWrx.BitArray32.BIT_22
      language: CSharp
      name:
        CSharp: BIT_22
        VB: BIT_22
      nameWithType:
        CSharp: BitArray32.BIT_22
        VB: BitArray32.BIT_22
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_22
        VB: WizardWrx.BitArray32.BIT_22
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_22
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 303
      summary: "\nBit 22\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_22 = 2097152U
          VB: Public Const BIT_22 As UInteger = 2097152UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_23
      commentId: F:WizardWrx.BitArray32.BIT_23
      language: CSharp
      name:
        CSharp: BIT_23
        VB: BIT_23
      nameWithType:
        CSharp: BitArray32.BIT_23
        VB: BitArray32.BIT_23
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_23
        VB: WizardWrx.BitArray32.BIT_23
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_23
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 308
      summary: "\nBit 23\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_23 = 4194304U
          VB: Public Const BIT_23 As UInteger = 4194304UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_24
      commentId: F:WizardWrx.BitArray32.BIT_24
      language: CSharp
      name:
        CSharp: BIT_24
        VB: BIT_24
      nameWithType:
        CSharp: BitArray32.BIT_24
        VB: BitArray32.BIT_24
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_24
        VB: WizardWrx.BitArray32.BIT_24
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_24
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 313
      summary: "\nBit 24\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_24 = 8388608U
          VB: Public Const BIT_24 As UInteger = 8388608UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_25
      commentId: F:WizardWrx.BitArray32.BIT_25
      language: CSharp
      name:
        CSharp: BIT_25
        VB: BIT_25
      nameWithType:
        CSharp: BitArray32.BIT_25
        VB: BitArray32.BIT_25
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_25
        VB: WizardWrx.BitArray32.BIT_25
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_25
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 318
      summary: "\nBit 25\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_25 = 16777216U
          VB: Public Const BIT_25 As UInteger = 16777216UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_26
      commentId: F:WizardWrx.BitArray32.BIT_26
      language: CSharp
      name:
        CSharp: BIT_26
        VB: BIT_26
      nameWithType:
        CSharp: BitArray32.BIT_26
        VB: BitArray32.BIT_26
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_26
        VB: WizardWrx.BitArray32.BIT_26
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_26
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 323
      summary: "\nBit 26\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_26 = 33554432U
          VB: Public Const BIT_26 As UInteger = 33554432UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_27
      commentId: F:WizardWrx.BitArray32.BIT_27
      language: CSharp
      name:
        CSharp: BIT_27
        VB: BIT_27
      nameWithType:
        CSharp: BitArray32.BIT_27
        VB: BitArray32.BIT_27
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_27
        VB: WizardWrx.BitArray32.BIT_27
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_27
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 328
      summary: "\nBit 27\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_27 = 67108864U
          VB: Public Const BIT_27 As UInteger = 67108864UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_28
      commentId: F:WizardWrx.BitArray32.BIT_28
      language: CSharp
      name:
        CSharp: BIT_28
        VB: BIT_28
      nameWithType:
        CSharp: BitArray32.BIT_28
        VB: BitArray32.BIT_28
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_28
        VB: WizardWrx.BitArray32.BIT_28
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_28
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 333
      summary: "\nBit 28\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_28 = 134217728U
          VB: Public Const BIT_28 As UInteger = 134217728UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_29
      commentId: F:WizardWrx.BitArray32.BIT_29
      language: CSharp
      name:
        CSharp: BIT_29
        VB: BIT_29
      nameWithType:
        CSharp: BitArray32.BIT_29
        VB: BitArray32.BIT_29
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_29
        VB: WizardWrx.BitArray32.BIT_29
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_29
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 338
      summary: "\nBit 29\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_29 = 268435456U
          VB: Public Const BIT_29 As UInteger = 268435456UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_30
      commentId: F:WizardWrx.BitArray32.BIT_30
      language: CSharp
      name:
        CSharp: BIT_30
        VB: BIT_30
      nameWithType:
        CSharp: BitArray32.BIT_30
        VB: BitArray32.BIT_30
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_30
        VB: WizardWrx.BitArray32.BIT_30
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_30
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 343
      summary: "\nBit 30\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_30 = 536870912U
          VB: Public Const BIT_30 As UInteger = 536870912UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_31
      commentId: F:WizardWrx.BitArray32.BIT_31
      language: CSharp
      name:
        CSharp: BIT_31
        VB: BIT_31
      nameWithType:
        CSharp: BitArray32.BIT_31
        VB: BitArray32.BIT_31
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_31
        VB: WizardWrx.BitArray32.BIT_31
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_31
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 348
      summary: "\nBit 31\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_31 = 1073741824U
          VB: Public Const BIT_31 As UInteger = 1073741824UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_32
      commentId: F:WizardWrx.BitArray32.BIT_32
      language: CSharp
      name:
        CSharp: BIT_32
        VB: BIT_32
      nameWithType:
        CSharp: BitArray32.BIT_32
        VB: BitArray32.BIT_32
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_32
        VB: WizardWrx.BitArray32.BIT_32
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_32
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 353
      summary: "\nBit 32\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_32 = 2147483648U
          VB: Public Const BIT_32 As UInteger = 2147483648UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_01
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_01
      language: CSharp
      name:
        CSharp: BIT_NUMBER_01
        VB: BIT_NUMBER_01
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_01
        VB: BitArray32.BIT_NUMBER_01
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_01
        VB: WizardWrx.BitArray32.BIT_NUMBER_01
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_01
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 361
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_01 = 1U
          VB: Public Const BIT_NUMBER_01 As UInteger = 1UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_02
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_02
      language: CSharp
      name:
        CSharp: BIT_NUMBER_02
        VB: BIT_NUMBER_02
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_02
        VB: BitArray32.BIT_NUMBER_02
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_02
        VB: WizardWrx.BitArray32.BIT_NUMBER_02
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_02
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 366
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_02 = 2U
          VB: Public Const BIT_NUMBER_02 As UInteger = 2UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_03
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_03
      language: CSharp
      name:
        CSharp: BIT_NUMBER_03
        VB: BIT_NUMBER_03
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_03
        VB: BitArray32.BIT_NUMBER_03
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_03
        VB: WizardWrx.BitArray32.BIT_NUMBER_03
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_03
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 371
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_03 = 3U
          VB: Public Const BIT_NUMBER_03 As UInteger = 3UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_04
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_04
      language: CSharp
      name:
        CSharp: BIT_NUMBER_04
        VB: BIT_NUMBER_04
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_04
        VB: BitArray32.BIT_NUMBER_04
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_04
        VB: WizardWrx.BitArray32.BIT_NUMBER_04
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_04
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 376
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_04 = 4U
          VB: Public Const BIT_NUMBER_04 As UInteger = 4UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_05
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_05
      language: CSharp
      name:
        CSharp: BIT_NUMBER_05
        VB: BIT_NUMBER_05
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_05
        VB: BitArray32.BIT_NUMBER_05
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_05
        VB: WizardWrx.BitArray32.BIT_NUMBER_05
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_05
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 381
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_05 = 5U
          VB: Public Const BIT_NUMBER_05 As UInteger = 5UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_06
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_06
      language: CSharp
      name:
        CSharp: BIT_NUMBER_06
        VB: BIT_NUMBER_06
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_06
        VB: BitArray32.BIT_NUMBER_06
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_06
        VB: WizardWrx.BitArray32.BIT_NUMBER_06
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_06
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 386
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_06 = 6U
          VB: Public Const BIT_NUMBER_06 As UInteger = 6UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_07
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_07
      language: CSharp
      name:
        CSharp: BIT_NUMBER_07
        VB: BIT_NUMBER_07
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_07
        VB: BitArray32.BIT_NUMBER_07
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_07
        VB: WizardWrx.BitArray32.BIT_NUMBER_07
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_07
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 391
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_07 = 7U
          VB: Public Const BIT_NUMBER_07 As UInteger = 7UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_08
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_08
      language: CSharp
      name:
        CSharp: BIT_NUMBER_08
        VB: BIT_NUMBER_08
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_08
        VB: BitArray32.BIT_NUMBER_08
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_08
        VB: WizardWrx.BitArray32.BIT_NUMBER_08
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_08
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 396
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_08 = 8U
          VB: Public Const BIT_NUMBER_08 As UInteger = 8UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_09
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_09
      language: CSharp
      name:
        CSharp: BIT_NUMBER_09
        VB: BIT_NUMBER_09
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_09
        VB: BitArray32.BIT_NUMBER_09
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_09
        VB: WizardWrx.BitArray32.BIT_NUMBER_09
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_09
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 401
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_09 = 9U
          VB: Public Const BIT_NUMBER_09 As UInteger = 9UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_10
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_10
      language: CSharp
      name:
        CSharp: BIT_NUMBER_10
        VB: BIT_NUMBER_10
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_10
        VB: BitArray32.BIT_NUMBER_10
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_10
        VB: WizardWrx.BitArray32.BIT_NUMBER_10
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_10
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 406
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_10 = 10U
          VB: Public Const BIT_NUMBER_10 As UInteger = 10UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_11
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_11
      language: CSharp
      name:
        CSharp: BIT_NUMBER_11
        VB: BIT_NUMBER_11
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_11
        VB: BitArray32.BIT_NUMBER_11
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_11
        VB: WizardWrx.BitArray32.BIT_NUMBER_11
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_11
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 411
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_11 = 11U
          VB: Public Const BIT_NUMBER_11 As UInteger = 11UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_12
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_12
      language: CSharp
      name:
        CSharp: BIT_NUMBER_12
        VB: BIT_NUMBER_12
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_12
        VB: BitArray32.BIT_NUMBER_12
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_12
        VB: WizardWrx.BitArray32.BIT_NUMBER_12
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_12
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 416
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_12 = 12U
          VB: Public Const BIT_NUMBER_12 As UInteger = 12UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_13
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_13
      language: CSharp
      name:
        CSharp: BIT_NUMBER_13
        VB: BIT_NUMBER_13
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_13
        VB: BitArray32.BIT_NUMBER_13
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_13
        VB: WizardWrx.BitArray32.BIT_NUMBER_13
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_13
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 421
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_13 = 13U
          VB: Public Const BIT_NUMBER_13 As UInteger = 13UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_14
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_14
      language: CSharp
      name:
        CSharp: BIT_NUMBER_14
        VB: BIT_NUMBER_14
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_14
        VB: BitArray32.BIT_NUMBER_14
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_14
        VB: WizardWrx.BitArray32.BIT_NUMBER_14
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_14
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 426
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_14 = 14U
          VB: Public Const BIT_NUMBER_14 As UInteger = 14UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_15
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_15
      language: CSharp
      name:
        CSharp: BIT_NUMBER_15
        VB: BIT_NUMBER_15
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_15
        VB: BitArray32.BIT_NUMBER_15
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_15
        VB: WizardWrx.BitArray32.BIT_NUMBER_15
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_15
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 431
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_15 = 15U
          VB: Public Const BIT_NUMBER_15 As UInteger = 15UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_16
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_16
      language: CSharp
      name:
        CSharp: BIT_NUMBER_16
        VB: BIT_NUMBER_16
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_16
        VB: BitArray32.BIT_NUMBER_16
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_16
        VB: WizardWrx.BitArray32.BIT_NUMBER_16
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_16
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 436
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_16 = 16U
          VB: Public Const BIT_NUMBER_16 As UInteger = 16UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_17
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_17
      language: CSharp
      name:
        CSharp: BIT_NUMBER_17
        VB: BIT_NUMBER_17
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_17
        VB: BitArray32.BIT_NUMBER_17
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_17
        VB: WizardWrx.BitArray32.BIT_NUMBER_17
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_17
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 441
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_17 = 17U
          VB: Public Const BIT_NUMBER_17 As UInteger = 17UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_18
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_18
      language: CSharp
      name:
        CSharp: BIT_NUMBER_18
        VB: BIT_NUMBER_18
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_18
        VB: BitArray32.BIT_NUMBER_18
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_18
        VB: WizardWrx.BitArray32.BIT_NUMBER_18
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_18
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 446
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_18 = 18U
          VB: Public Const BIT_NUMBER_18 As UInteger = 18UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_19
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_19
      language: CSharp
      name:
        CSharp: BIT_NUMBER_19
        VB: BIT_NUMBER_19
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_19
        VB: BitArray32.BIT_NUMBER_19
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_19
        VB: WizardWrx.BitArray32.BIT_NUMBER_19
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_19
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 451
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_19 = 19U
          VB: Public Const BIT_NUMBER_19 As UInteger = 19UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_20
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_20
      language: CSharp
      name:
        CSharp: BIT_NUMBER_20
        VB: BIT_NUMBER_20
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_20
        VB: BitArray32.BIT_NUMBER_20
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_20
        VB: WizardWrx.BitArray32.BIT_NUMBER_20
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_20
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 456
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_20 = 20U
          VB: Public Const BIT_NUMBER_20 As UInteger = 20UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_21
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_21
      language: CSharp
      name:
        CSharp: BIT_NUMBER_21
        VB: BIT_NUMBER_21
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_21
        VB: BitArray32.BIT_NUMBER_21
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_21
        VB: WizardWrx.BitArray32.BIT_NUMBER_21
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_21
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 461
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_21 = 21U
          VB: Public Const BIT_NUMBER_21 As UInteger = 21UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_22
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_22
      language: CSharp
      name:
        CSharp: BIT_NUMBER_22
        VB: BIT_NUMBER_22
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_22
        VB: BitArray32.BIT_NUMBER_22
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_22
        VB: WizardWrx.BitArray32.BIT_NUMBER_22
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_22
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 466
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_22 = 22U
          VB: Public Const BIT_NUMBER_22 As UInteger = 22UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_23
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_23
      language: CSharp
      name:
        CSharp: BIT_NUMBER_23
        VB: BIT_NUMBER_23
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_23
        VB: BitArray32.BIT_NUMBER_23
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_23
        VB: WizardWrx.BitArray32.BIT_NUMBER_23
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_23
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 471
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_23 = 23U
          VB: Public Const BIT_NUMBER_23 As UInteger = 23UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_24
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_24
      language: CSharp
      name:
        CSharp: BIT_NUMBER_24
        VB: BIT_NUMBER_24
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_24
        VB: BitArray32.BIT_NUMBER_24
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_24
        VB: WizardWrx.BitArray32.BIT_NUMBER_24
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_24
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 476
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_24 = 24U
          VB: Public Const BIT_NUMBER_24 As UInteger = 24UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_25
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_25
      language: CSharp
      name:
        CSharp: BIT_NUMBER_25
        VB: BIT_NUMBER_25
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_25
        VB: BitArray32.BIT_NUMBER_25
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_25
        VB: WizardWrx.BitArray32.BIT_NUMBER_25
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_25
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 481
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_25 = 25U
          VB: Public Const BIT_NUMBER_25 As UInteger = 25UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_26
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_26
      language: CSharp
      name:
        CSharp: BIT_NUMBER_26
        VB: BIT_NUMBER_26
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_26
        VB: BitArray32.BIT_NUMBER_26
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_26
        VB: WizardWrx.BitArray32.BIT_NUMBER_26
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_26
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 486
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_26 = 26U
          VB: Public Const BIT_NUMBER_26 As UInteger = 26UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_27
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_27
      language: CSharp
      name:
        CSharp: BIT_NUMBER_27
        VB: BIT_NUMBER_27
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_27
        VB: BitArray32.BIT_NUMBER_27
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_27
        VB: WizardWrx.BitArray32.BIT_NUMBER_27
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_27
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 491
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_27 = 27U
          VB: Public Const BIT_NUMBER_27 As UInteger = 27UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_28
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_28
      language: CSharp
      name:
        CSharp: BIT_NUMBER_28
        VB: BIT_NUMBER_28
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_28
        VB: BitArray32.BIT_NUMBER_28
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_28
        VB: WizardWrx.BitArray32.BIT_NUMBER_28
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_28
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 496
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_28 = 28U
          VB: Public Const BIT_NUMBER_28 As UInteger = 28UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_29
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_29
      language: CSharp
      name:
        CSharp: BIT_NUMBER_29
        VB: BIT_NUMBER_29
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_29
        VB: BitArray32.BIT_NUMBER_29
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_29
        VB: WizardWrx.BitArray32.BIT_NUMBER_29
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_29
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 501
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_29 = 29U
          VB: Public Const BIT_NUMBER_29 As UInteger = 29UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_30
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_30
      language: CSharp
      name:
        CSharp: BIT_NUMBER_30
        VB: BIT_NUMBER_30
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_30
        VB: BitArray32.BIT_NUMBER_30
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_30
        VB: WizardWrx.BitArray32.BIT_NUMBER_30
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_30
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 506
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_30 = 30U
          VB: Public Const BIT_NUMBER_30 As UInteger = 30UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_31
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_31
      language: CSharp
      name:
        CSharp: BIT_NUMBER_31
        VB: BIT_NUMBER_31
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_31
        VB: BitArray32.BIT_NUMBER_31
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_31
        VB: WizardWrx.BitArray32.BIT_NUMBER_31
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_31
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 511
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_31 = 31U
          VB: Public Const BIT_NUMBER_31 As UInteger = 31UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NUMBER_32
      commentId: F:WizardWrx.BitArray32.BIT_NUMBER_32
      language: CSharp
      name:
        CSharp: BIT_NUMBER_32
        VB: BIT_NUMBER_32
      nameWithType:
        CSharp: BitArray32.BIT_NUMBER_32
        VB: BitArray32.BIT_NUMBER_32
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NUMBER_32
        VB: WizardWrx.BitArray32.BIT_NUMBER_32
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NUMBER_32
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 516
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_NUMBER_32 = 32U
          VB: Public Const BIT_NUMBER_32 As UInteger = 32UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_00
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_00
      language: CSharp
      name:
        CSharp: BIT_OFFSET_00
        VB: BIT_OFFSET_00
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_00
        VB: BitArray32.BIT_OFFSET_00
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_00
        VB: WizardWrx.BitArray32.BIT_OFFSET_00
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_00
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 524
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_00 = 0U
          VB: Public Const BIT_OFFSET_00 As UInteger = 0UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_01
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_01
      language: CSharp
      name:
        CSharp: BIT_OFFSET_01
        VB: BIT_OFFSET_01
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_01
        VB: BitArray32.BIT_OFFSET_01
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_01
        VB: WizardWrx.BitArray32.BIT_OFFSET_01
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_01
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 529
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_01 = 1U
          VB: Public Const BIT_OFFSET_01 As UInteger = 1UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_02
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_02
      language: CSharp
      name:
        CSharp: BIT_OFFSET_02
        VB: BIT_OFFSET_02
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_02
        VB: BitArray32.BIT_OFFSET_02
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_02
        VB: WizardWrx.BitArray32.BIT_OFFSET_02
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_02
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 534
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_02 = 2U
          VB: Public Const BIT_OFFSET_02 As UInteger = 2UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_03
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_03
      language: CSharp
      name:
        CSharp: BIT_OFFSET_03
        VB: BIT_OFFSET_03
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_03
        VB: BitArray32.BIT_OFFSET_03
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_03
        VB: WizardWrx.BitArray32.BIT_OFFSET_03
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_03
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 539
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_03 = 3U
          VB: Public Const BIT_OFFSET_03 As UInteger = 3UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_04
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_04
      language: CSharp
      name:
        CSharp: BIT_OFFSET_04
        VB: BIT_OFFSET_04
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_04
        VB: BitArray32.BIT_OFFSET_04
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_04
        VB: WizardWrx.BitArray32.BIT_OFFSET_04
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_04
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 544
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_04 = 4U
          VB: Public Const BIT_OFFSET_04 As UInteger = 4UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_05
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_05
      language: CSharp
      name:
        CSharp: BIT_OFFSET_05
        VB: BIT_OFFSET_05
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_05
        VB: BitArray32.BIT_OFFSET_05
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_05
        VB: WizardWrx.BitArray32.BIT_OFFSET_05
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_05
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 549
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_05 = 5U
          VB: Public Const BIT_OFFSET_05 As UInteger = 5UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_06
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_06
      language: CSharp
      name:
        CSharp: BIT_OFFSET_06
        VB: BIT_OFFSET_06
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_06
        VB: BitArray32.BIT_OFFSET_06
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_06
        VB: WizardWrx.BitArray32.BIT_OFFSET_06
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_06
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 554
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_06 = 6U
          VB: Public Const BIT_OFFSET_06 As UInteger = 6UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_07
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_07
      language: CSharp
      name:
        CSharp: BIT_OFFSET_07
        VB: BIT_OFFSET_07
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_07
        VB: BitArray32.BIT_OFFSET_07
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_07
        VB: WizardWrx.BitArray32.BIT_OFFSET_07
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_07
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 559
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_07 = 7U
          VB: Public Const BIT_OFFSET_07 As UInteger = 7UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_08
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_08
      language: CSharp
      name:
        CSharp: BIT_OFFSET_08
        VB: BIT_OFFSET_08
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_08
        VB: BitArray32.BIT_OFFSET_08
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_08
        VB: WizardWrx.BitArray32.BIT_OFFSET_08
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_08
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 564
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_08 = 8U
          VB: Public Const BIT_OFFSET_08 As UInteger = 8UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_09
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_09
      language: CSharp
      name:
        CSharp: BIT_OFFSET_09
        VB: BIT_OFFSET_09
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_09
        VB: BitArray32.BIT_OFFSET_09
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_09
        VB: WizardWrx.BitArray32.BIT_OFFSET_09
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_09
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 569
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_09 = 9U
          VB: Public Const BIT_OFFSET_09 As UInteger = 9UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_10
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_10
      language: CSharp
      name:
        CSharp: BIT_OFFSET_10
        VB: BIT_OFFSET_10
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_10
        VB: BitArray32.BIT_OFFSET_10
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_10
        VB: WizardWrx.BitArray32.BIT_OFFSET_10
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_10
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 574
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_10 = 10U
          VB: Public Const BIT_OFFSET_10 As UInteger = 10UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_11
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_11
      language: CSharp
      name:
        CSharp: BIT_OFFSET_11
        VB: BIT_OFFSET_11
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_11
        VB: BitArray32.BIT_OFFSET_11
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_11
        VB: WizardWrx.BitArray32.BIT_OFFSET_11
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_11
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 579
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_11 = 11U
          VB: Public Const BIT_OFFSET_11 As UInteger = 11UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_12
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_12
      language: CSharp
      name:
        CSharp: BIT_OFFSET_12
        VB: BIT_OFFSET_12
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_12
        VB: BitArray32.BIT_OFFSET_12
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_12
        VB: WizardWrx.BitArray32.BIT_OFFSET_12
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_12
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 584
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_12 = 12U
          VB: Public Const BIT_OFFSET_12 As UInteger = 12UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_13
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_13
      language: CSharp
      name:
        CSharp: BIT_OFFSET_13
        VB: BIT_OFFSET_13
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_13
        VB: BitArray32.BIT_OFFSET_13
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_13
        VB: WizardWrx.BitArray32.BIT_OFFSET_13
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_13
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 589
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_13 = 13U
          VB: Public Const BIT_OFFSET_13 As UInteger = 13UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_14
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_14
      language: CSharp
      name:
        CSharp: BIT_OFFSET_14
        VB: BIT_OFFSET_14
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_14
        VB: BitArray32.BIT_OFFSET_14
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_14
        VB: WizardWrx.BitArray32.BIT_OFFSET_14
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_14
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 594
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_14 = 14U
          VB: Public Const BIT_OFFSET_14 As UInteger = 14UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_15
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_15
      language: CSharp
      name:
        CSharp: BIT_OFFSET_15
        VB: BIT_OFFSET_15
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_15
        VB: BitArray32.BIT_OFFSET_15
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_15
        VB: WizardWrx.BitArray32.BIT_OFFSET_15
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_15
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 599
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_15 = 15U
          VB: Public Const BIT_OFFSET_15 As UInteger = 15UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_16
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_16
      language: CSharp
      name:
        CSharp: BIT_OFFSET_16
        VB: BIT_OFFSET_16
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_16
        VB: BitArray32.BIT_OFFSET_16
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_16
        VB: WizardWrx.BitArray32.BIT_OFFSET_16
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_16
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 604
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_16 = 16U
          VB: Public Const BIT_OFFSET_16 As UInteger = 16UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_17
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_17
      language: CSharp
      name:
        CSharp: BIT_OFFSET_17
        VB: BIT_OFFSET_17
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_17
        VB: BitArray32.BIT_OFFSET_17
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_17
        VB: WizardWrx.BitArray32.BIT_OFFSET_17
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_17
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 609
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_17 = 17U
          VB: Public Const BIT_OFFSET_17 As UInteger = 17UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_18
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_18
      language: CSharp
      name:
        CSharp: BIT_OFFSET_18
        VB: BIT_OFFSET_18
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_18
        VB: BitArray32.BIT_OFFSET_18
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_18
        VB: WizardWrx.BitArray32.BIT_OFFSET_18
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_18
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 614
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_18 = 18U
          VB: Public Const BIT_OFFSET_18 As UInteger = 18UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_19
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_19
      language: CSharp
      name:
        CSharp: BIT_OFFSET_19
        VB: BIT_OFFSET_19
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_19
        VB: BitArray32.BIT_OFFSET_19
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_19
        VB: WizardWrx.BitArray32.BIT_OFFSET_19
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_19
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 619
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_19 = 19U
          VB: Public Const BIT_OFFSET_19 As UInteger = 19UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_20
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_20
      language: CSharp
      name:
        CSharp: BIT_OFFSET_20
        VB: BIT_OFFSET_20
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_20
        VB: BitArray32.BIT_OFFSET_20
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_20
        VB: WizardWrx.BitArray32.BIT_OFFSET_20
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_20
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 624
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_20 = 20U
          VB: Public Const BIT_OFFSET_20 As UInteger = 20UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_21
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_21
      language: CSharp
      name:
        CSharp: BIT_OFFSET_21
        VB: BIT_OFFSET_21
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_21
        VB: BitArray32.BIT_OFFSET_21
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_21
        VB: WizardWrx.BitArray32.BIT_OFFSET_21
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_21
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 629
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_21 = 21U
          VB: Public Const BIT_OFFSET_21 As UInteger = 21UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_22
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_22
      language: CSharp
      name:
        CSharp: BIT_OFFSET_22
        VB: BIT_OFFSET_22
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_22
        VB: BitArray32.BIT_OFFSET_22
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_22
        VB: WizardWrx.BitArray32.BIT_OFFSET_22
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_22
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 634
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_22 = 22U
          VB: Public Const BIT_OFFSET_22 As UInteger = 22UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_23
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_23
      language: CSharp
      name:
        CSharp: BIT_OFFSET_23
        VB: BIT_OFFSET_23
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_23
        VB: BitArray32.BIT_OFFSET_23
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_23
        VB: WizardWrx.BitArray32.BIT_OFFSET_23
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_23
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 639
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_23 = 23U
          VB: Public Const BIT_OFFSET_23 As UInteger = 23UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_24
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_24
      language: CSharp
      name:
        CSharp: BIT_OFFSET_24
        VB: BIT_OFFSET_24
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_24
        VB: BitArray32.BIT_OFFSET_24
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_24
        VB: WizardWrx.BitArray32.BIT_OFFSET_24
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_24
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 644
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_24 = 24U
          VB: Public Const BIT_OFFSET_24 As UInteger = 24UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_25
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_25
      language: CSharp
      name:
        CSharp: BIT_OFFSET_25
        VB: BIT_OFFSET_25
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_25
        VB: BitArray32.BIT_OFFSET_25
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_25
        VB: WizardWrx.BitArray32.BIT_OFFSET_25
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_25
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 649
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_25 = 25U
          VB: Public Const BIT_OFFSET_25 As UInteger = 25UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_26
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_26
      language: CSharp
      name:
        CSharp: BIT_OFFSET_26
        VB: BIT_OFFSET_26
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_26
        VB: BitArray32.BIT_OFFSET_26
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_26
        VB: WizardWrx.BitArray32.BIT_OFFSET_26
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_26
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 654
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_26 = 26U
          VB: Public Const BIT_OFFSET_26 As UInteger = 26UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_27
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_27
      language: CSharp
      name:
        CSharp: BIT_OFFSET_27
        VB: BIT_OFFSET_27
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_27
        VB: BitArray32.BIT_OFFSET_27
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_27
        VB: WizardWrx.BitArray32.BIT_OFFSET_27
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_27
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 659
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_27 = 27U
          VB: Public Const BIT_OFFSET_27 As UInteger = 27UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_28
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_28
      language: CSharp
      name:
        CSharp: BIT_OFFSET_28
        VB: BIT_OFFSET_28
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_28
        VB: BitArray32.BIT_OFFSET_28
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_28
        VB: WizardWrx.BitArray32.BIT_OFFSET_28
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_28
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 664
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_28 = 28U
          VB: Public Const BIT_OFFSET_28 As UInteger = 28UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_29
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_29
      language: CSharp
      name:
        CSharp: BIT_OFFSET_29
        VB: BIT_OFFSET_29
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_29
        VB: BitArray32.BIT_OFFSET_29
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_29
        VB: WizardWrx.BitArray32.BIT_OFFSET_29
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_29
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 669
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_29 = 29U
          VB: Public Const BIT_OFFSET_29 As UInteger = 29UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_30
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_30
      language: CSharp
      name:
        CSharp: BIT_OFFSET_30
        VB: BIT_OFFSET_30
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_30
        VB: BitArray32.BIT_OFFSET_30
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_30
        VB: WizardWrx.BitArray32.BIT_OFFSET_30
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_30
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 674
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_30 = 30U
          VB: Public Const BIT_OFFSET_30 As UInteger = 30UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_OFFSET_31
      commentId: F:WizardWrx.BitArray32.BIT_OFFSET_31
      language: CSharp
      name:
        CSharp: BIT_OFFSET_31
        VB: BIT_OFFSET_31
      nameWithType:
        CSharp: BitArray32.BIT_OFFSET_31
        VB: BitArray32.BIT_OFFSET_31
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_OFFSET_31
        VB: WizardWrx.BitArray32.BIT_OFFSET_31
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_OFFSET_31
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 679
      summary: "\nBits are numbered from lowest (least significant) to highest (most significant).\n"
      example: []
      syntax:
        content:
          CSharp: public const uint BIT_OFFSET_31 = 31U
          VB: Public Const BIT_OFFSET_31 As UInteger = 31UI
        return:
          type: System.UInt32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.MINIMUM_BIT_GROUP_IN_FORMAT
      commentId: F:WizardWrx.BitArray32.MINIMUM_BIT_GROUP_IN_FORMAT
      language: CSharp
      name:
        CSharp: MINIMUM_BIT_GROUP_IN_FORMAT
        VB: MINIMUM_BIT_GROUP_IN_FORMAT
      nameWithType:
        CSharp: BitArray32.MINIMUM_BIT_GROUP_IN_FORMAT
        VB: BitArray32.MINIMUM_BIT_GROUP_IN_FORMAT
      qualifiedName:
        CSharp: WizardWrx.BitArray32.MINIMUM_BIT_GROUP_IN_FORMAT
        VB: WizardWrx.BitArray32.MINIMUM_BIT_GROUP_IN_FORMAT
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: MINIMUM_BIT_GROUP_IN_FORMAT
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 689
      summary: "\nThe FormatIntegerAsBitArray overload that takes a Bits Per Group\nargument (pintBitsPerGroup) requires its value to either be this\nvalue or an even multiple of it, or SUPPRESS_BIT_GROUPING (zero).\n"
      example: []
      syntax:
        content:
          CSharp: public const int MINIMUM_BIT_GROUP_IN_FORMAT = 4
          VB: Public Const MINIMUM_BIT_GROUP_IN_FORMAT As Integer = 4
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.SUPPRESS_BIT_GROUPING
      commentId: F:WizardWrx.BitArray32.SUPPRESS_BIT_GROUPING
      language: CSharp
      name:
        CSharp: SUPPRESS_BIT_GROUPING
        VB: SUPPRESS_BIT_GROUPING
      nameWithType:
        CSharp: BitArray32.SUPPRESS_BIT_GROUPING
        VB: BitArray32.SUPPRESS_BIT_GROUPING
      qualifiedName:
        CSharp: WizardWrx.BitArray32.SUPPRESS_BIT_GROUPING
        VB: WizardWrx.BitArray32.SUPPRESS_BIT_GROUPING
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: SUPPRESS_BIT_GROUPING
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 697
      summary: "\nArgument pintBitsPerGroup of static method FormatIntegerAsBitArray\nmust be either zero (this constant value) or an even multiple of\nMINIMUM_BIT_GROUP_IN_FORMAT (4), which also operates as its minimum\npermitted positive value.\n"
      example: []
      syntax:
        content:
          CSharp: public const int SUPPRESS_BIT_GROUPING = 0
          VB: Public Const SUPPRESS_BIT_GROUPING As Integer = 0
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.ON
      commentId: F:WizardWrx.BitArray32.ON
      language: CSharp
      name:
        CSharp: ON
        VB: ON
      nameWithType:
        CSharp: BitArray32.ON
        VB: BitArray32.ON
      qualifiedName:
        CSharp: WizardWrx.BitArray32.ON
        VB: WizardWrx.BitArray32.ON
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: ON
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 705
      summary: "\nThis symbolic constant for identifying a bit as ON maps to bool true.\n"
      example: []
      syntax:
        content:
          CSharp: public const bool ON = true
          VB: Public Const ON As Boolean = True
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.OFF
      commentId: F:WizardWrx.BitArray32.OFF
      language: CSharp
      name:
        CSharp: OFF
        VB: OFF
      nameWithType:
        CSharp: BitArray32.OFF
        VB: BitArray32.OFF
      qualifiedName:
        CSharp: WizardWrx.BitArray32.OFF
        VB: WizardWrx.BitArray32.OFF
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: OFF
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 710
      summary: "\nThis symbolic constant for identifying a bit as OFF maps to bool false.\n"
      example: []
      syntax:
        content:
          CSharp: public const bool OFF = false
          VB: Public Const OFF As Boolean = False
        return:
          type: System.Boolean
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NBR_MAX
      commentId: F:WizardWrx.BitArray32.BIT_NBR_MAX
      language: CSharp
      name:
        CSharp: BIT_NBR_MAX
        VB: BIT_NBR_MAX
      nameWithType:
        CSharp: BitArray32.BIT_NBR_MAX
        VB: BitArray32.BIT_NBR_MAX
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NBR_MAX
        VB: WizardWrx.BitArray32.BIT_NBR_MAX
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NBR_MAX
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 716
      summary: "\nSince this class numbers bits from 1. the highest supported bit number is 32.\n"
      example: []
      syntax:
        content:
          CSharp: public const int BIT_NBR_MAX = 32
          VB: Public Const BIT_NBR_MAX As Integer = 32
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BIT_NBR_MIN
      commentId: F:WizardWrx.BitArray32.BIT_NBR_MIN
      language: CSharp
      name:
        CSharp: BIT_NBR_MIN
        VB: BIT_NBR_MIN
      nameWithType:
        CSharp: BitArray32.BIT_NBR_MIN
        VB: BitArray32.BIT_NBR_MIN
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BIT_NBR_MIN
        VB: WizardWrx.BitArray32.BIT_NBR_MIN
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BIT_NBR_MIN
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 721
      summary: "\nSince this class numbers bits from 1. the first bit number is 1.\n"
      example: []
      syntax:
        content:
          CSharp: public const int BIT_NBR_MIN = 1
          VB: Public Const BIT_NBR_MIN As Integer = 1
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.#ctor
      commentId: M:WizardWrx.BitArray32.#ctor
      language: CSharp
      name:
        CSharp: BitArray32()
        VB: BitArray32()
      nameWithType:
        CSharp: BitArray32.BitArray32()
        VB: BitArray32.BitArray32()
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitArray32()
        VB: WizardWrx.BitArray32.BitArray32()
      type: Constructor
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: .ctor
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 814
      summary: "\nThis default constructor for a BitArray32 object creates an\nobject with all bits OFF.\n"
      remarks: "\nInternally, the object is implemented as an unsigned 32 bit integer,\na native value type.\n"
      example: []
      syntax:
        content:
          CSharp: public BitArray32()
          VB: Public Sub New
      overload: WizardWrx.BitArray32.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.BitArray32.#ctor(System.UInt32)
      commentId: M:WizardWrx.BitArray32.#ctor(System.UInt32)
      language: CSharp
      name:
        CSharp: BitArray32(UInt32)
        VB: BitArray32(UInt32)
      nameWithType:
        CSharp: BitArray32.BitArray32(UInt32)
        VB: BitArray32.BitArray32(UInt32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitArray32(System.UInt32)
        VB: WizardWrx.BitArray32.BitArray32(System.UInt32)
      type: Constructor
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: .ctor
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 824
      summary: "\nThis overloaded constructor for a BitArray32 object creates an\nobject with a specified initial value.\n"
      example: []
      syntax:
        content:
          CSharp: public BitArray32(uint puintInitialValue)
          VB: Public Sub New(puintInitialValue As UInteger)
        parameters:
        - id: puintInitialValue
          type: System.UInt32
          description: "\nPass the initial value into the constructor as an unsigned 32 bit\ninteger, a native value type.\n"
      overload: WizardWrx.BitArray32.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.BitArray32.BitOff(System.Int32)
      commentId: M:WizardWrx.BitArray32.BitOff(System.Int32)
      language: CSharp
      name:
        CSharp: BitOff(Int32)
        VB: BitOff(Int32)
      nameWithType:
        CSharp: BitArray32.BitOff(Int32)
        VB: BitArray32.BitOff(Int32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitOff(System.Int32)
        VB: WizardWrx.BitArray32.BitOff(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BitOff
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 845
      summary: "\nTurn a specified bit in the _uintBitMask instance variable OFF.\n"
      remarks: "\nThis code uses a temporary instance of the BitArray32 class, which is\ndiscarded as the method returns.\n\nSince neither operand of the exclusive-OR assignment operator can be\na BitArray32 object _ubmTheBit must be cast to UInt32, using the\nimplicit operator UInt32, defined elsewhere in this class. Private\nvariable _uintBitMask is already a UInt32.\n"
      example: []
      syntax:
        content:
          CSharp: public void BitOff(int pintBitNumber)
          VB: Public Sub BitOff(pintBitNumber As Integer)
        parameters:
        - id: pintBitNumber
          type: System.Int32
          description: "\nOrdinal number of bit to turn OFF. Bits are numbered from 1 to 32,\nwith 1 being the least significant bit.\n"
      overload: WizardWrx.BitArray32.BitOff*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.BitArray32.BitOn(System.Int32)
      commentId: M:WizardWrx.BitArray32.BitOn(System.Int32)
      language: CSharp
      name:
        CSharp: BitOn(Int32)
        VB: BitOn(Int32)
      nameWithType:
        CSharp: BitArray32.BitOn(Int32)
        VB: BitArray32.BitOn(Int32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitOn(System.Int32)
        VB: WizardWrx.BitArray32.BitOn(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BitOn
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 868
      summary: "\nTurn a specified bit in the _uintBitMask instance variable ON.\n"
      remarks: "\nThis code uses a temporary instance of the BitArray32 class, which is\ndiscarded as the method returns.\n\nSince neither operand of the logical OR assignment operator can be\na BitArray32 object _ubmTheBit must be cast to UInt32, using the\nimplicit operator UInt32, defined elsewhere in this class. Private\nvariable _uintBitMask is already a UInt32.\n"
      example: []
      syntax:
        content:
          CSharp: public void BitOn(int pintBitNumber)
          VB: Public Sub BitOn(pintBitNumber As Integer)
        parameters:
        - id: pintBitNumber
          type: System.Int32
          description: "\nOrdinal number of bit to turn ON. Bits are numbered from 1 to 32,\nwith 1 being the least significant bit.\n"
      overload: WizardWrx.BitArray32.BitOn*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.BitArray32.IsBitOff(System.Int32)
      commentId: M:WizardWrx.BitArray32.IsBitOff(System.Int32)
      language: CSharp
      name:
        CSharp: IsBitOff(Int32)
        VB: IsBitOff(Int32)
      nameWithType:
        CSharp: BitArray32.IsBitOff(Int32)
        VB: BitArray32.IsBitOff(Int32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.IsBitOff(System.Int32)
        VB: WizardWrx.BitArray32.IsBitOff(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: IsBitOff
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 896
      summary: "\nTest the state of a specified bit, returning TRUE if it is OFF.\n"
      remarks: "\nThis code uses a temporary instance of the BitArray32 class, which is\ndiscarded as the method returns.\n\nUnlike the BitOff and BitOn operators, everything is already cast to\nUint32. Therefore, this method works just fine without any casts.\n\nSince this code is unlikely to change, it uses the most concise form\nof the IF statement, which supports a single executable statement in\neach branch.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsBitOff(int pintBitNumber)
          VB: Public Function IsBitOff(pintBitNumber As Integer) As Boolean
        parameters:
        - id: pintBitNumber
          type: System.Int32
          description: "\nOrdinal number of bit to evaluate. Bits are numbered from 1 to 32,\nwith 1 being the least significant bit.\n"
        return:
          type: System.Boolean
          description: "\nTRUE if the specified bit is ON, else FALSE.\n"
      overload: WizardWrx.BitArray32.IsBitOff*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.BitArray32.IsBitOn(System.Int32)
      commentId: M:WizardWrx.BitArray32.IsBitOn(System.Int32)
      language: CSharp
      name:
        CSharp: IsBitOn(Int32)
        VB: IsBitOn(Int32)
      nameWithType:
        CSharp: BitArray32.IsBitOn(Int32)
        VB: BitArray32.IsBitOn(Int32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.IsBitOn(System.Int32)
        VB: WizardWrx.BitArray32.IsBitOn(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: IsBitOn
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 928
      summary: "\nTest the state of a specified bit, returning TRUE if it is ON.\n"
      remarks: "\nThis code uses a temporary instance of the BitArray32 class, which is\ndiscarded as the method returns.\n\nUnlike the BitOff and BitOn operators, everything is already cast to\nUint32. Therefore, this method works just fine without any casts.\n\nSince this code is unlikely to change, it uses the most concise form\nof the IF statement, which supports a single executable statement in\neach branch.\n"
      example: []
      syntax:
        content:
          CSharp: public bool IsBitOn(int pintBitNumber)
          VB: Public Function IsBitOn(pintBitNumber As Integer) As Boolean
        parameters:
        - id: pintBitNumber
          type: System.Int32
          description: "\nOrdinal number of bit to evaluate. Bits are numbered from 1 to 32,\nwith 1 being the least significant bit.\n"
        return:
          type: System.Boolean
          description: "\nTRUE if the specified bit is ON, else FALSE.\n"
      overload: WizardWrx.BitArray32.IsBitOn*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.BitArray32.BitNumber(System.UInt32)
      commentId: M:WizardWrx.BitArray32.BitNumber(System.UInt32)
      language: CSharp
      name:
        CSharp: BitNumber(UInt32)
        VB: BitNumber(UInt32)
      nameWithType:
        CSharp: BitArray32.BitNumber(UInt32)
        VB: BitArray32.BitNumber(UInt32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitNumber(System.UInt32)
        VB: WizardWrx.BitArray32.BitNumber(System.UInt32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BitNumber
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 956
      summary: "\nReturn the bit number that corresponds to the given value. Bits are\nnumbered from 1, starting with the least significant bit.\n"
      example: []
      syntax:
        content:
          CSharp: public static uint BitNumber(uint puintBitValue)
          VB: Public Shared Function BitNumber(puintBitValue As UInteger) As UInteger
        parameters:
        - id: puintBitValue
          type: System.UInt32
          description: "\nUnsigned integer puintBitValue must be a integral power of two.\n"
        return:
          type: System.UInt32
          description: "\nIf the function succeeds, the return value is the bit number that\ncorresponds to the specified integral power of two.\n"
      overload: WizardWrx.BitArray32.BitNumber*
      exceptions:
      - type: System.ArgumentOutOfRangeException
        commentId: T:System.ArgumentOutOfRangeException
        description: "\nAn ArgumentOutOfRangeException exception is thrown if the input\nvalue is not an integral power of two.\n"
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        System.ArgumentOutOfRangeException: 
    - id: WizardWrx.BitArray32.BitNumber(System.Int32)
      commentId: M:WizardWrx.BitArray32.BitNumber(System.Int32)
      language: CSharp
      name:
        CSharp: BitNumber(Int32)
        VB: BitNumber(Int32)
      nameWithType:
        CSharp: BitArray32.BitNumber(Int32)
        VB: BitArray32.BitNumber(Int32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitNumber(System.Int32)
        VB: WizardWrx.BitArray32.BitNumber(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BitNumber
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 978
      summary: "\nReturn the bit number that corresponds to the given value. Bits are\nnumbered from 1, starting with the least significant bit.\n"
      example: []
      syntax:
        content:
          CSharp: public static uint BitNumber(int pintBitValue)
          VB: Public Shared Function BitNumber(pintBitValue As Integer) As UInteger
        parameters:
        - id: pintBitValue
          type: System.Int32
          description: "\nSigned integer puintBitValue must be a positive integral power of\ntwo.\n"
        return:
          type: System.UInt32
          description: "\nIf the function succeeds, the return value is the bit number that\ncorresponds to the specified integral power of two.\n"
      overload: WizardWrx.BitArray32.BitNumber*
      exceptions:
      - type: System.ArgumentOutOfRangeException
        commentId: T:System.ArgumentOutOfRangeException
        description: "\nAn ArgumentOutOfRangeException exception is thrown if the input\nvalue is not an integral power of two.\n"
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        System.ArgumentOutOfRangeException: 
    - id: WizardWrx.BitArray32.BitPosition(System.UInt32)
      commentId: M:WizardWrx.BitArray32.BitPosition(System.UInt32)
      language: CSharp
      name:
        CSharp: BitPosition(UInt32)
        VB: BitPosition(UInt32)
      nameWithType:
        CSharp: BitArray32.BitPosition(UInt32)
        VB: BitArray32.BitPosition(UInt32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitPosition(System.UInt32)
        VB: WizardWrx.BitArray32.BitPosition(System.UInt32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BitPosition
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1006
      summary: "\nReturn the bit position that corresponds to the given value. Bit\npositions are numbered from 0, starting with the least significant\nbit.\n"
      example: []
      syntax:
        content:
          CSharp: public static uint BitPosition(uint puintBitValue)
          VB: Public Shared Function BitPosition(puintBitValue As UInteger) As UInteger
        parameters:
        - id: puintBitValue
          type: System.UInt32
          description: "\nUnsigned integer puintBitValue must be a integral power of two.\n"
        return:
          type: System.UInt32
          description: "\nIf the function succeeds, the return value is the bit position that\ncorresponds to the specified integral power of two.\n"
      overload: WizardWrx.BitArray32.BitPosition*
      exceptions:
      - type: System.ArgumentOutOfRangeException
        commentId: T:System.ArgumentOutOfRangeException
        description: "\nAn ArgumentOutOfRangeException exception is thrown if the input\nvalue is not an integral power of two.\n"
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        System.ArgumentOutOfRangeException: 
    - id: WizardWrx.BitArray32.BitPosition(System.Int32)
      commentId: M:WizardWrx.BitArray32.BitPosition(System.Int32)
      language: CSharp
      name:
        CSharp: BitPosition(Int32)
        VB: BitPosition(Int32)
      nameWithType:
        CSharp: BitArray32.BitPosition(Int32)
        VB: BitArray32.BitPosition(Int32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitPosition(System.Int32)
        VB: WizardWrx.BitArray32.BitPosition(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: BitPosition
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1039
      summary: "\nReturn the bit position that corresponds to the given value. Bit\npositions are numbered from 0, starting with the least significant\nbit.\n"
      example: []
      syntax:
        content:
          CSharp: public static uint BitPosition(int pintBitValue)
          VB: Public Shared Function BitPosition(pintBitValue As Integer) As UInteger
        parameters:
        - id: pintBitValue
          type: System.Int32
          description: "\nSigned integer pintBitValue must be a positive integral power of\ntwo.\n"
        return:
          type: System.UInt32
          description: "\nIf the function succeeds, the return value is the bit position that\ncorresponds to the specified integral power of two.\n"
      overload: WizardWrx.BitArray32.BitPosition*
      exceptions:
      - type: System.ArgumentOutOfRangeException
        commentId: T:System.ArgumentOutOfRangeException
        description: "\nAn ArgumentOutOfRangeException exception is thrown if the input\nvalue is not an integral power of two.\n"
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        System.ArgumentOutOfRangeException: 
    - id: WizardWrx.BitArray32.FormatIntegerAsBitArray``1(``0)
      commentId: M:WizardWrx.BitArray32.FormatIntegerAsBitArray``1(``0)
      language: CSharp
      name:
        CSharp: FormatIntegerAsBitArray<T>(T)
        VB: FormatIntegerAsBitArray(Of T)(T)
      nameWithType:
        CSharp: BitArray32.FormatIntegerAsBitArray<T>(T)
        VB: BitArray32.FormatIntegerAsBitArray(Of T)(T)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.FormatIntegerAsBitArray<T>(T)
        VB: WizardWrx.BitArray32.FormatIntegerAsBitArray(Of T)(T)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: FormatIntegerAsBitArray
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1113
      summary: "\nFormat any integral value type as an array of bits, listed from most\nsignificant to least.\n"
      remarks: "\nThis method could easily be implemented as a call to the second\noverload, but I chose to keep their implementations separate for two\nreasons.\n\n1) The second overload concatenates its second argument to the same\nstring constant used by this method, passing the resulting string as\nthe second argument to the string.Format overload that takes a\nformat provider as its first argument. Since string concatenation is\nexpensive, why use it when the simpler method call achieves the goal\nso much more cheaply.\n\n2) Since string formatters can see high usage, and the only difference\nbetween the two overloads is the string concatenation, calling the\nsecond overload not only incurs a wasteful string concatenation, but it\nmust waste a stack frame for this dubious objective.\n"
      example: []
      syntax:
        content:
          CSharp: public static string FormatIntegerAsBitArray<T>(T pintIntegralValueType)
          VB: Public Shared Function FormatIntegerAsBitArray(Of T)(pintIntegralValueType As T) As String
        parameters:
        - id: pintIntegralValueType
          type: '{T}'
          description: "\nThis argument is expected to be an integral type, but a non-integral\ntype is processed by degrading to its default ToString method.\n"
        typeParameters:
        - id: T
          description: "\nThis method accepts all integral value types except IntPtr. However,\nsince there is no documented provision in the .NET Framework to\nenforce such a restriction on a generic type at compile time, the\ntask is left to this method, which enforces it at run time. However,\nwhen fed an incompatible type, this method degrades gracefully by\napplying its default string format.\n"
        return:
          type: System.String
          description: "\nWhen argument pintIntegralValueType is an integral value type, the\nreturned string is composed of zeros and ones that represent the\nbits that store its value, listing them from most significant bit to\nleast.\n\nIf the integer has a sign, the most significant bit is the bit that\nis reserved to hold it. Likewise, the most significant bit of an\nunsigned integer is the bit that stores the highest power of two\nthat it can hold.\n"
      overload: WizardWrx.BitArray32.FormatIntegerAsBitArray*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.BitArray32.FormatIntegerAsBitArray``1(``0,System.Int32)
      commentId: M:WizardWrx.BitArray32.FormatIntegerAsBitArray``1(``0,System.Int32)
      language: CSharp
      name:
        CSharp: FormatIntegerAsBitArray<T>(T, Int32)
        VB: FormatIntegerAsBitArray(Of T)(T, Int32)
      nameWithType:
        CSharp: BitArray32.FormatIntegerAsBitArray<T>(T, Int32)
        VB: BitArray32.FormatIntegerAsBitArray(Of T)(T, Int32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.FormatIntegerAsBitArray<T>(T, System.Int32)
        VB: WizardWrx.BitArray32.FormatIntegerAsBitArray(Of T)(T, System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: FormatIntegerAsBitArray
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1162
      summary: "\nFormat any integral value type as an array of bits, listed from most\nsignificant to least, with optional grouping.\n"
      example: []
      syntax:
        content:
          CSharp: public static string FormatIntegerAsBitArray<T>(T pintIntegralValueType, int pintBitsPerGroup)
          VB: Public Shared Function FormatIntegerAsBitArray(Of T)(pintIntegralValueType As T, pintBitsPerGroup As Integer) As String
        parameters:
        - id: pintIntegralValueType
          type: '{T}'
          description: "\nThis argument is expected to be an integral type, but a non-integral\ntype is processed by degrading to its default ToString method.\n"
        - id: pintBitsPerGroup
          type: System.Int32
          description: "\nSpecify the number of bits to include in each group, or specify zero\nto suppress formatting, equivalent to calling the first overload.\n\nIMPORTANT: The mechanism by which the spaces are inserted imposes a\nrestriction that this value must be evenly divisible by 4, such that\nthe four bits of each byte are kept together.\n"
        typeParameters:
        - id: T
          description: "\nThis method accepts all integral value types except IntPtr. However,\nsince there is no documented provision in the .NET Framework to\nenforce such a restriction on a generic type at compile time, the\ntask is left to this method to do so at run time. However, when fed\nan incompatible type, this method degrades gracefully by applying\nits default string format.\n"
        return:
          type: System.String
          description: "\nWhen argument pintIntegralValueType is an integral value type, the\nreturned string is composed of zeros and ones that represent the\nbits that store its value, listing them from most significant bit to\nleast.\n\nIf the integer has a sign, the most significant bit is the bit that\nis reserved to hold it. Likewise, the most significant bit of an\nunsigned integer is the bit that stores the highest power of two\nthat it can hold.\n"
      overload: WizardWrx.BitArray32.FormatIntegerAsBitArray*
      exceptions:
      - type: System.FormatException
        commentId: T:System.FormatException
        description: "\nInvalid formatting instructions raise a FormatException exception,\nwhich typically wraps an ArgumentException, and supplies additional\ndetail not usually available from a typical FormatException.\n"
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        System.FormatException: 
    - id: WizardWrx.BitArray32.FormatIntegerAsHex``1(``0)
      commentId: M:WizardWrx.BitArray32.FormatIntegerAsHex``1(``0)
      language: CSharp
      name:
        CSharp: FormatIntegerAsHex<T>(T)
        VB: FormatIntegerAsHex(Of T)(T)
      nameWithType:
        CSharp: BitArray32.FormatIntegerAsHex<T>(T)
        VB: BitArray32.FormatIntegerAsHex(Of T)(T)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.FormatIntegerAsHex<T>(T)
        VB: WizardWrx.BitArray32.FormatIntegerAsHex(Of T)(T)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: FormatIntegerAsHex
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1208
      summary: "\nFormat any integral value type as an array of hexadecimal &quot;digits&quot;, \nlisted from most significant to least, specifying a standard numeric\nformat string and a minimum length appropriate to its maximum value.\n\nThe advantage of this method over the standard ToString overloads is\nthat you don&apos;t have to figure out how many hexadecimal digits you\nmust allow.\n"
      example: []
      syntax:
        content:
          CSharp: public static string FormatIntegerAsHex<T>(T pintIntegralValueType)
          VB: Public Shared Function FormatIntegerAsHex(Of T)(pintIntegralValueType As T) As String
        parameters:
        - id: pintIntegralValueType
          type: '{T}'
          description: "\nThis argument is expected to be an integral type, but a non-integral\ntype is processed by degrading to its default ToString method.\n"
        typeParameters:
        - id: T
          description: "\nThis method accepts all integral value types except IntPtr. However,\nsince there is no documented provision in the .NET Framework to\nenforce such a restriction on a generic type at compile time, the\ntask is left to this method to do so at run time. However, when fed\nan incompatible type, this method degrades gracefully by applying\nits default string format.\n"
        return:
          type: System.String
          description: "\nWhen argument pintIntegralValueType is an integral value type, the\nreturned string is composed of hexadecimal &quot;digits&quot; that represent\nits value in base 16. The length of the string is a function of the\nmaximum value that can be stored in an integer of the input type.\nHence, a Byte, being an 8 bit integer, returns a two-character hex\nstring, a UInt16 returns four, UInt32 eight, and UInt64 sixteen.\n\nOtherwise, the default ToString method on its type is called, and\nthe returned string is whatever that method provides.\n"
      overload: WizardWrx.BitArray32.FormatIntegerAsHex*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      language: CSharp
      name:
        CSharp: GetRulerTens(BitArray32.BitCount, BitArray32.BitDisplayOrder)
        VB: GetRulerTens(BitArray32.BitCount, BitArray32.BitDisplayOrder)
      nameWithType:
        CSharp: BitArray32.GetRulerTens(BitArray32.BitCount, BitArray32.BitDisplayOrder)
        VB: BitArray32.GetRulerTens(BitArray32.BitCount, BitArray32.BitDisplayOrder)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount, WizardWrx.BitArray32.BitDisplayOrder)
        VB: WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount, WizardWrx.BitArray32.BitDisplayOrder)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: GetRulerTens
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1290
      summary: "\nGet the tens marks of the bit mask ruler from the string resources.\n"
      remarks: "\nThis is a method call, rather than a property, because the string is\nread from a resource. \n\nThe InvalidOperationException and InvalidEnumArgumentException\nexceptions bubble up, rather than being caught in this routine to\navoid duplicating the task in both of its internal callers. \n"
      example: []
      syntax:
        content:
          CSharp: public static string GetRulerTens(BitArray32.BitCount penmBitCount, BitArray32.BitDisplayOrder penmBitDisplayOrder)
          VB: Public Shared Function GetRulerTens(penmBitCount As BitArray32.BitCount, penmBitDisplayOrder As BitArray32.BitDisplayOrder) As String
        parameters:
        - id: penmBitCount
          type: WizardWrx.BitArray32.BitCount
          description: "\nIndicate the length of ruler to generate by way of a member of the\nBitCount enumeration. See the BitCount enumeration for a full\nexplanation of each value.\n"
        - id: penmBitDisplayOrder
          type: WizardWrx.BitArray32.BitDisplayOrder
          description: "\nIndicate the direction in which the ruler should be displayed. See\nthe XML documentation for the BitDisplayOrder enumeration for a full\nexplanation of each value.\n"
        return:
          type: System.String
          description: "\nThe return value is a string, exactly 60 characters long, containing\nnine spaces, each followed by the next sequential integer, counting\nfrom 1.\n"
      overload: WizardWrx.BitArray32.GetRulerTens*
      exceptions:
      - type: System.ComponentModel.InvalidEnumArgumentException
        commentId: T:System.ComponentModel.InvalidEnumArgumentException
        description: "\nThis method throws an ComponentModel.InvalidEnumArgumentException\nexception when the penmBitCount argument is not a valid member of\nthe BitCount enumeration and when the penmBitDisplayOrder argument\nis not a valid member of the BitDisplayOrder enumeration. In both\ncases, a value of Unspecified is treated as invalid.\n\nIf the BitCount value that is invalid, the exception is actually\nthrown by a private method, TrimRuler, which this method, by virtue\nof being unguarded, allows to bubble up the stack, as would be the\ncase if it had thrown the exception.\n"
      - type: System.InvalidOperationException
        commentId: T:System.InvalidOperationException
        description: "\nThis method allows the InvalidOperationException exception thrown\nwhen it calls private method TrimRuler, sending a pstrWholeRuler\nstring that has a string length that differs from the length implied\nby the numeric value of the penmBitCount enumeration argument to\nbubble up the call stack.\n"
      see:
      - linkId: WizardWrx.BitArray32.BitDisplayOrder
        commentId: T:WizardWrx.BitArray32.BitDisplayOrder
      - linkId: WizardWrx.BitArray32.BitCount
        commentId: T:WizardWrx.BitArray32.BitCount
      seealso:
      - linkId: WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
        commentId: M:WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.BitArray32.BitDisplayOrder: 
        WizardWrx.BitArray32.BitCount: 
        WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder): 
        System.ComponentModel.InvalidEnumArgumentException: 
        System.InvalidOperationException: 
    - id: WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      language: CSharp
      name:
        CSharp: GetRulerUnits(BitArray32.BitCount, BitArray32.BitDisplayOrder)
        VB: GetRulerUnits(BitArray32.BitCount, BitArray32.BitDisplayOrder)
      nameWithType:
        CSharp: BitArray32.GetRulerUnits(BitArray32.BitCount, BitArray32.BitDisplayOrder)
        VB: BitArray32.GetRulerUnits(BitArray32.BitCount, BitArray32.BitDisplayOrder)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount, WizardWrx.BitArray32.BitDisplayOrder)
        VB: WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount, WizardWrx.BitArray32.BitDisplayOrder)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: GetRulerUnits
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1363
      summary: "\nGet the units marks of the bit mask ruler from the string resources.\n"
      remarks: "\nThis is a method call, rather than a property, because the string is\nread from a resource. \n\nThe InvalidOperationException and InvalidEnumArgumentException\nexceptions bubble up, rather than being caught in this routine to\navoid duplicating the task in both of its internal callers. \n"
      example: []
      syntax:
        content:
          CSharp: public static string GetRulerUnits(BitArray32.BitCount penmBitCount, BitArray32.BitDisplayOrder penmBitDisplayOrder)
          VB: Public Shared Function GetRulerUnits(penmBitCount As BitArray32.BitCount, penmBitDisplayOrder As BitArray32.BitDisplayOrder) As String
        parameters:
        - id: penmBitCount
          type: WizardWrx.BitArray32.BitCount
          description: "\nIndicate the length of ruler to generate by way of a member of the\nBitCount enumeration. See the BitCount enumeration for a full\nexplanation of each value.\n"
        - id: penmBitDisplayOrder
          type: WizardWrx.BitArray32.BitDisplayOrder
          description: "\nIndicate the direction in which the ruler should be displayed. See\nthe XML documentation for the BitDisplayOrder enumeration for a full\nexplanation of each value.\n"
        return:
          type: System.String
          description: "\nThe return value is a string, exactly 64 characters long, containing\nnumbers from 1 to 10, repeated six times, followed by numbers\n1 through 4, enough to cover the bits in mask of 64 bits.\n"
      overload: WizardWrx.BitArray32.GetRulerUnits*
      exceptions:
      - type: System.ComponentModel.InvalidEnumArgumentException
        commentId: T:System.ComponentModel.InvalidEnumArgumentException
        description: "\nThis method throws an ComponentModel.InvalidEnumArgumentException\nexception when the penmBitCount argument is not a valid member of\nthe BitCount enumeration and when the penmBitDisplayOrder argument\nis not a valid member of the BitDisplayOrder enumeration. In both \ncases, a value of Unspecified is treated as invalid.\n\nIf the BitCount value that is invalid, the exception is actually\nthrown by a private method, TrimRuler, which this method, by virtue\nof being unguarded, allows to bubble up the stack, as would be the\ncase if it had thrown the exception.\n"
      - type: System.InvalidOperationException
        commentId: T:System.InvalidOperationException
        description: "\nThis method allows the InvalidOperationException exception thrown\nwhen it calls private method TrimRuler, sending a pstrWholeRuler\nstring that has a string length that differs from the length implied\nby the numeric value of the penmBitCount enumeration argument to\nbubble up the call stack.\n"
      see:
      - linkId: WizardWrx.BitArray32.BitCount
        commentId: T:WizardWrx.BitArray32.BitCount
      - linkId: WizardWrx.BitArray32.BitDisplayOrder
        commentId: T:WizardWrx.BitArray32.BitDisplayOrder
      seealso:
      - linkId: WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
        commentId: M:WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
      references:
        WizardWrx.BitArray32.BitCount: 
        WizardWrx.BitArray32.BitDisplayOrder: 
        WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder): 
        System.ComponentModel.InvalidEnumArgumentException: 
        System.InvalidOperationException: 
    - id: WizardWrx.BitArray32.TurnBitOff(System.Int32)
      commentId: M:WizardWrx.BitArray32.TurnBitOff(System.Int32)
      language: CSharp
      name:
        CSharp: TurnBitOff(Int32)
        VB: TurnBitOff(Int32)
      nameWithType:
        CSharp: BitArray32.TurnBitOff(Int32)
        VB: BitArray32.TurnBitOff(Int32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.TurnBitOff(System.Int32)
        VB: WizardWrx.BitArray32.TurnBitOff(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: TurnBitOff
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1411
      summary: "\nReturn a new BitArray32 object in which a specified bit is turned ON\nand all others are OFF.\n"
      remarks: "\nIn essence, this method returns an instance of the BitArray32 created\nby calling its default constructor.\n\nThis method and its companion, TurnBitOn, bounds checks its input,\nnotwithstanding the fact that the bitwise operators discard the high\nbits in the bit count operand of the left logical shift operator.\n\nSince all instance methods call these static methods, these bounds\nchecks suffice for the entire class.\n"
      example: []
      syntax:
        content:
          CSharp: public static BitArray32 TurnBitOff(int pintBitNumber)
          VB: Public Shared Function TurnBitOff(pintBitNumber As Integer) As BitArray32
        parameters:
        - id: pintBitNumber
          type: System.Int32
          description: "\nOrdinal number of bit to turn OFF. Bits are numbered from 1 to 32,\nwith 1 being the least significant bit.\n"
        return:
          type: WizardWrx.BitArray32
          description: "\nA new BitArray32 object with a single bit turned OFF, and all others\nalready turned OFF.\n"
      overload: WizardWrx.BitArray32.TurnBitOff*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.BitArray32.TurnBitOn(System.Int32)
      commentId: M:WizardWrx.BitArray32.TurnBitOn(System.Int32)
      language: CSharp
      name:
        CSharp: TurnBitOn(Int32)
        VB: TurnBitOn(Int32)
      nameWithType:
        CSharp: BitArray32.TurnBitOn(Int32)
        VB: BitArray32.TurnBitOn(Int32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.TurnBitOn(System.Int32)
        VB: WizardWrx.BitArray32.TurnBitOn(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: TurnBitOn
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1449
      summary: "\nReturn a new BitArray32 with bit number (ordinal) pintBitNumber\nturned ON.\n"
      remarks: "\nThis method and its companion, TurnBitOff, bounds checks its input,\nnotwithstanding the fact that the bitwise operators discard the high\nbits in the bit count operand of the left logical shift operator.\n\nSince all instance methods call these static methods, these bounds\nchecks suffice for the entire class.\n"
      example: []
      syntax:
        content:
          CSharp: public static BitArray32 TurnBitOn(int pintBitNumber)
          VB: Public Shared Function TurnBitOn(pintBitNumber As Integer) As BitArray32
        parameters:
        - id: pintBitNumber
          type: System.Int32
          description: "\nNumber of bit to turn on with bits numbered from 1 to 32, starting\nwith Bit 1 as the least significant bit.\n"
        return:
          type: WizardWrx.BitArray32
          description: "\nA new BitArray32 object, with the specified bit ON and all others \nOFF.\n"
      overload: WizardWrx.BitArray32.TurnBitOn*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.BitArray32.ToString
      commentId: M:WizardWrx.BitArray32.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: BitArray32.ToString()
        VB: BitArray32.ToString()
      qualifiedName:
        CSharp: WizardWrx.BitArray32.ToString()
        VB: WizardWrx.BitArray32.ToString()
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: ToString
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1565
      summary: "\nOverride the ToString method to provide a useful output, in the form\nof a hexadecimal representation of the value of its bit mask.\n"
      example: []
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
          description: "\nA String representation of the private variable that holds the\ncurrent value of the bit mask, formatted as a hexadecimal\nrepresentation of its value.\n"
      overload: WizardWrx.BitArray32.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: WizardWrx.BitArray32.ToString(System.String)
      commentId: M:WizardWrx.BitArray32.ToString(System.String)
      language: CSharp
      name:
        CSharp: ToString(String)
        VB: ToString(String)
      nameWithType:
        CSharp: BitArray32.ToString(String)
        VB: BitArray32.ToString(String)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.ToString(System.String)
        VB: WizardWrx.BitArray32.ToString(System.String)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: ToString
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1580
      summary: "\nOverride the ToString method to provide additional useful outputs,\nsuch as a couple of optional binary (bit level) formats.\n"
      example: []
      syntax:
        content:
          CSharp: public string ToString(string format)
          VB: Public Function ToString(format As String) As String
        parameters:
        - id: format
          type: System.String
          description: "\nIn keeping with the standard nomenclature, this format string gives\ndetails about the output format desired.\n"
        return:
          type: System.String
          description: ''
      overload: WizardWrx.BitArray32.ToString*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.BitArray32.Equals(System.Object)
      commentId: M:WizardWrx.BitArray32.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: BitArray32.Equals(Object)
        VB: BitArray32.Equals(Object)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.Equals(System.Object)
        VB: WizardWrx.BitArray32.Equals(System.Object)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Equals
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1600
      summary: "\nOverride the default Equals method, so that class instances can\nparticipate in meaningful equality tests.\n"
      example: []
      syntax:
        content:
          CSharp: public override bool Equals(object pComparand)
          VB: Public Overrides Function Equals(pComparand As Object) As Boolean
        parameters:
        - id: pComparand
          type: System.Object
          description: "\nA reference to a generic object to be compared against the current\ninstance.\n"
        return:
          type: System.Boolean
          description: "\nTrue if the two meet our definition of Equals, which is that the two\nbit masks are equal.\n"
      overload: WizardWrx.BitArray32.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: WizardWrx.BitArray32.Equals(WizardWrx.BitArray32)
      commentId: M:WizardWrx.BitArray32.Equals(WizardWrx.BitArray32)
      language: CSharp
      name:
        CSharp: Equals(BitArray32)
        VB: Equals(BitArray32)
      nameWithType:
        CSharp: BitArray32.Equals(BitArray32)
        VB: BitArray32.Equals(BitArray32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.Equals(WizardWrx.BitArray32)
        VB: WizardWrx.BitArray32.Equals(WizardWrx.BitArray32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Equals
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1626
      summary: "\nProvide a typecast version of the generic Equals method.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Equals(BitArray32 pComparand)
          VB: Public Function Equals(pComparand As BitArray32) As Boolean
        parameters:
        - id: pComparand
          type: WizardWrx.BitArray32
          description: "\nThe comparand is the other BitArray32 to be tested for equality. \n"
        return:
          type: System.Boolean
          description: "\nTrue if the two meet our definition of Equals, which is that the two\nbit masks are equal.\n"
      overload: WizardWrx.BitArray32.Equals*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: WizardWrx.BitArray32.GetHashCode
      commentId: M:WizardWrx.BitArray32.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: BitArray32.GetHashCode()
        VB: BitArray32.GetHashCode()
      qualifiedName:
        CSharp: WizardWrx.BitArray32.GetHashCode()
        VB: WizardWrx.BitArray32.GetHashCode()
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: GetHashCode
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1643
      summary: "\nThis class overrides the GetHashCode method of its base class to\nreturn the hash code for the uint32 primitive that stores its data.\n"
      example: []
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
          description: "\nAn Integer which is the value returned by the GetHashCode method of\nthe uint32 object.\n"
      overload: WizardWrx.BitArray32.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: WizardWrx.BitArray32.op_Equality(WizardWrx.BitArray32,WizardWrx.BitArray32)
      commentId: M:WizardWrx.BitArray32.op_Equality(WizardWrx.BitArray32,WizardWrx.BitArray32)
      language: CSharp
      name:
        CSharp: Equality(BitArray32, BitArray32)
        VB: Equality(BitArray32, BitArray32)
      nameWithType:
        CSharp: BitArray32.Equality(BitArray32, BitArray32)
        VB: BitArray32.Equality(BitArray32, BitArray32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.Equality(WizardWrx.BitArray32, WizardWrx.BitArray32)
        VB: WizardWrx.BitArray32.Equality(WizardWrx.BitArray32, WizardWrx.BitArray32)
      type: Operator
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: op_Equality
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1666
      summary: "\nThough not recommended, members of this class override the equality\nand inequality operators.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator ==(BitArray32 pobjLValue, BitArray32 pobjRValue)
          VB: Public Shared Operator =(pobjLValue As BitArray32, pobjRValue As BitArray32) As Boolean
        parameters:
        - id: pobjLValue
          type: WizardWrx.BitArray32
          description: "\nValue on left of equal sign, otherwise known as the LValue or left\noperand.\n"
        - id: pobjRValue
          type: WizardWrx.BitArray32
          description: "\nValue on right of equal sign, otherwise known as the RValue or right\noperand.\n"
        return:
          type: System.Boolean
          description: "\nTrue if both value are equal, or if they refer to the same object.\n"
      overload: WizardWrx.BitArray32.op_Equality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.BitArray32.op_Inequality(WizardWrx.BitArray32,WizardWrx.BitArray32)
      commentId: M:WizardWrx.BitArray32.op_Inequality(WizardWrx.BitArray32,WizardWrx.BitArray32)
      language: CSharp
      name:
        CSharp: Inequality(BitArray32, BitArray32)
        VB: Inequality(BitArray32, BitArray32)
      nameWithType:
        CSharp: BitArray32.Inequality(BitArray32, BitArray32)
        VB: BitArray32.Inequality(BitArray32, BitArray32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.Inequality(WizardWrx.BitArray32, WizardWrx.BitArray32)
        VB: WizardWrx.BitArray32.Inequality(WizardWrx.BitArray32, WizardWrx.BitArray32)
      type: Operator
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: op_Inequality
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1695
      summary: "\nThough not recommended, members of this class override the equality\nand inequality operators.\n"
      example: []
      syntax:
        content:
          CSharp: public static bool operator !=(BitArray32 pobjLValue, BitArray32 pojbRValue)
          VB: Public Shared Operator <>(pobjLValue As BitArray32, pojbRValue As BitArray32) As Boolean
        parameters:
        - id: pobjLValue
          type: WizardWrx.BitArray32
          description: "\nValue on left of equal sign, otherwise known as the LValue or left\noperand.\n"
        - id: pojbRValue
          type: WizardWrx.BitArray32
          description: "\nValue on right of equal sign, otherwise known as the RValue or right\noperand.\n"
        return:
          type: System.Boolean
          description: "\nInverse of the value returned by the overloaded equals operator.\n"
      overload: WizardWrx.BitArray32.op_Inequality*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.BitArray32.op_Implicit(WizardWrx.BitArray32)~System.UInt32
      commentId: M:WizardWrx.BitArray32.op_Implicit(WizardWrx.BitArray32)~System.UInt32
      language: CSharp
      name:
        CSharp: Implicit(BitArray32 to UInt32)
        VB: Widening(BitArray32 to UInt32)
      nameWithType:
        CSharp: BitArray32.Implicit(BitArray32 to UInt32)
        VB: BitArray32.Widening(BitArray32 to UInt32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.Implicit(WizardWrx.BitArray32 to System.UInt32)
        VB: WizardWrx.BitArray32.Widening(WizardWrx.BitArray32 to System.UInt32)
      type: Operator
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: op_Implicit
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1714
      summary: "\nCast a BitArray32 object to its underlying type, UInt32.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator uint (BitArray32 pMask)
          VB: Public Shared Widening Operator CType(pMask As BitArray32) As UInteger
        parameters:
        - id: pMask
          type: WizardWrx.BitArray32
          description: "\nThe BitArray32 to be cast to a UInt32.\n"
        return:
          type: System.UInt32
          description: "\nA reference to its input variable, cast to a UInt32.\n"
      overload: WizardWrx.BitArray32.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
    - id: WizardWrx.BitArray32.op_Implicit(System.UInt32)~WizardWrx.BitArray32
      commentId: M:WizardWrx.BitArray32.op_Implicit(System.UInt32)~WizardWrx.BitArray32
      language: CSharp
      name:
        CSharp: Implicit(UInt32 to BitArray32)
        VB: Widening(UInt32 to BitArray32)
      nameWithType:
        CSharp: BitArray32.Implicit(UInt32 to BitArray32)
        VB: BitArray32.Widening(UInt32 to BitArray32)
      qualifiedName:
        CSharp: WizardWrx.BitArray32.Implicit(System.UInt32 to WizardWrx.BitArray32)
        VB: WizardWrx.BitArray32.Widening(System.UInt32 to WizardWrx.BitArray32)
      type: Operator
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: op_Implicit
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 1730
      summary: "\nCast a Uint32, the underlying type of a BitArray32, to an object of\ntype BitArray32.\n"
      example: []
      syntax:
        content:
          CSharp: public static implicit operator BitArray32(uint pUInt32)
          VB: Public Shared Widening Operator CType(pUInt32 As UInteger) As BitArray32
        parameters:
        - id: pUInt32
          type: System.UInt32
          description: "\nThe Uint32 to be cast to a BitArray32.\n"
        return:
          type: WizardWrx.BitArray32
          description: "\nA reference to its input variable, cast to a BitArray32.\n"
      overload: WizardWrx.BitArray32.op_Implicit*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: WizardWrx.BitArray32.BitCount
    commentId: T:WizardWrx.BitArray32.BitCount
    language: CSharp
    name:
      CSharp: BitArray32.BitCount
      VB: BitArray32.BitCount
    nameWithType:
      CSharp: BitArray32.BitCount
      VB: BitArray32.BitCount
    qualifiedName:
      CSharp: WizardWrx.BitArray32.BitCount
      VB: WizardWrx.BitArray32.BitCount
    type: Enum
    assemblies:
    - WizardWrx.BitMath
    namespace: WizardWrx
    source:
      id: BitCount
      path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
      startLine: 122
    summary: "\nUse this enumeration to tell the GetRulerTens and GetRulerUnits\nhow long you want the ruler to be. The name of the enumeration,\nBitCount, should help you to select the correct length, as is its\nnumeric value.\n"
    example: []
    syntax:
      content:
        CSharp: public enum BitCount
        VB: Public Enum BitCount
    see:
    - linkId: WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
    - linkId: WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
    seealso:
    - linkId: WizardWrx.BitArray32.BitDisplayOrder
      commentId: T:WizardWrx.BitArray32.BitDisplayOrder
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: WizardWrx.BitArray32.BitCount.Unspecified
      commentId: F:WizardWrx.BitArray32.BitCount.Unspecified
      language: CSharp
      name:
        CSharp: Unspecified
        VB: Unspecified
      nameWithType:
        CSharp: BitArray32.BitCount.Unspecified
        VB: BitArray32.BitCount.Unspecified
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitCount.Unspecified
        VB: WizardWrx.BitArray32.BitCount.Unspecified
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Unspecified
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 128
      summary: "\nThe default (uninitialized) value of Unspecified is invalid, and\nelicits an InvalidEnumArgumentException exception.\n"
      example: []
      syntax:
        content:
          CSharp: Unspecified = 0
          VB: Unspecified = 0
        return:
          type: WizardWrx.BitArray32.BitCount
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BitCount.Count08
      commentId: F:WizardWrx.BitArray32.BitCount.Count08
      language: CSharp
      name:
        CSharp: Count08
        VB: Count08
      nameWithType:
        CSharp: BitArray32.BitCount.Count08
        VB: BitArray32.BitCount.Count08
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitCount.Count08
        VB: WizardWrx.BitArray32.BitCount.Count08
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Count08
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 133
      summary: "\nCreate a ruler for masks of 8 bits (1 byte).\n"
      example: []
      syntax:
        content:
          CSharp: Count08 = 8
          VB: Count08 = 8
        return:
          type: WizardWrx.BitArray32.BitCount
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BitCount.Count16
      commentId: F:WizardWrx.BitArray32.BitCount.Count16
      language: CSharp
      name:
        CSharp: Count16
        VB: Count16
      nameWithType:
        CSharp: BitArray32.BitCount.Count16
        VB: BitArray32.BitCount.Count16
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitCount.Count16
        VB: WizardWrx.BitArray32.BitCount.Count16
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Count16
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 138
      summary: "\nCreate a ruler for masks of 16 bits (2 bytes).\n"
      example: []
      syntax:
        content:
          CSharp: Count16 = 16
          VB: Count16 = 16
        return:
          type: WizardWrx.BitArray32.BitCount
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BitCount.Count32
      commentId: F:WizardWrx.BitArray32.BitCount.Count32
      language: CSharp
      name:
        CSharp: Count32
        VB: Count32
      nameWithType:
        CSharp: BitArray32.BitCount.Count32
        VB: BitArray32.BitCount.Count32
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitCount.Count32
        VB: WizardWrx.BitArray32.BitCount.Count32
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Count32
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 143
      summary: "\nCreate a ruler for masks of 32 bits (4 bytes).\n"
      example: []
      syntax:
        content:
          CSharp: Count32 = 32
          VB: Count32 = 32
        return:
          type: WizardWrx.BitArray32.BitCount
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BitCount.Count64
      commentId: F:WizardWrx.BitArray32.BitCount.Count64
      language: CSharp
      name:
        CSharp: Count64
        VB: Count64
      nameWithType:
        CSharp: BitArray32.BitCount.Count64
        VB: BitArray32.BitCount.Count64
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitCount.Count64
        VB: WizardWrx.BitArray32.BitCount.Count64
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Count64
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 148
      summary: "\nCreate a ruler for masks of 64 bits (8 bytes).\n"
      example: []
      syntax:
        content:
          CSharp: Count64 = 64
          VB: Count64 = 64
        return:
          type: WizardWrx.BitArray32.BitCount
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    references:
      WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder): 
      WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder): 
      WizardWrx.BitArray32.BitDisplayOrder: 
  - id: WizardWrx.BitArray32.BitDisplayOrder
    commentId: T:WizardWrx.BitArray32.BitDisplayOrder
    language: CSharp
    name:
      CSharp: BitArray32.BitDisplayOrder
      VB: BitArray32.BitDisplayOrder
    nameWithType:
      CSharp: BitArray32.BitDisplayOrder
      VB: BitArray32.BitDisplayOrder
    qualifiedName:
      CSharp: WizardWrx.BitArray32.BitDisplayOrder
      VB: WizardWrx.BitArray32.BitDisplayOrder
    type: Enum
    assemblies:
    - WizardWrx.BitMath
    namespace: WizardWrx
    source:
      id: BitDisplayOrder
      path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
      startLine: 159
    summary: "\nUse this enumeration to tell the GetRulerTens and GetRulerUnits\nin which direction you want the ruler to appear.\n"
    example: []
    syntax:
      content:
        CSharp: public enum BitDisplayOrder
        VB: Public Enum BitDisplayOrder
    see:
    - linkId: WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
    - linkId: WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
    seealso:
    - linkId: WizardWrx.BitArray32.BitCount
      commentId: T:WizardWrx.BitArray32.BitCount
    modifiers:
      CSharp:
      - public
      - enum
      VB:
      - Public
      - Enum
    items:
    - id: WizardWrx.BitArray32.BitDisplayOrder.Unspecified
      commentId: F:WizardWrx.BitArray32.BitDisplayOrder.Unspecified
      language: CSharp
      name:
        CSharp: Unspecified
        VB: Unspecified
      nameWithType:
        CSharp: BitArray32.BitDisplayOrder.Unspecified
        VB: BitArray32.BitDisplayOrder.Unspecified
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitDisplayOrder.Unspecified
        VB: WizardWrx.BitArray32.BitDisplayOrder.Unspecified
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Unspecified
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 165
      summary: "\nThe default (uninitialized) value of Unspecified is invalid, and\nelicits an InvalidEnumArgumentException exception.\n"
      example: []
      syntax:
        content:
          CSharp: Unspecified = 0
          VB: Unspecified = 0
        return:
          type: WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BitDisplayOrder.HighBitToLowBit
      commentId: F:WizardWrx.BitArray32.BitDisplayOrder.HighBitToLowBit
      language: CSharp
      name:
        CSharp: HighBitToLowBit
        VB: HighBitToLowBit
      nameWithType:
        CSharp: BitArray32.BitDisplayOrder.HighBitToLowBit
        VB: BitArray32.BitDisplayOrder.HighBitToLowBit
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitDisplayOrder.HighBitToLowBit
        VB: WizardWrx.BitArray32.BitDisplayOrder.HighBitToLowBit
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: HighBitToLowBit
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 176
      summary: "\nHighBitToLowBit elicits a ruler with its markings numbered from\nright to left (High bit to Low), the order in which bits appear\nin core dumps and in most of the graphical displays that appear\nin technical documentation.\n\nSince this is the conventional display order, it is the default\nwhen \n"
      example: []
      syntax:
        content:
          CSharp: HighBitToLowBit = 1
          VB: HighBitToLowBit = 1
        return:
          type: WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitArray32.BitDisplayOrder.LowBitToHighBit
      commentId: F:WizardWrx.BitArray32.BitDisplayOrder.LowBitToHighBit
      language: CSharp
      name:
        CSharp: LowBitToHighBit
        VB: LowBitToHighBit
      nameWithType:
        CSharp: BitArray32.BitDisplayOrder.LowBitToHighBit
        VB: BitArray32.BitDisplayOrder.LowBitToHighBit
      qualifiedName:
        CSharp: WizardWrx.BitArray32.BitDisplayOrder.LowBitToHighBit
        VB: WizardWrx.BitArray32.BitDisplayOrder.LowBitToHighBit
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: LowBitToHighBit
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitArray32.cs
        startLine: 184
      summary: "\nLowBitToHighBit elicits a ruler with its markings numbered from\nleft to right (Low bit to High), which may be more useful for a\ncarbon unit, especially one who is unaccustomed to reading bit\nmasks from core dumps.\n"
      example: []
      syntax:
        content:
          CSharp: LowBitToHighBit = 2
          VB: LowBitToHighBit = 2
        return:
          type: WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    references:
      WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder): 
      WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder): 
      WizardWrx.BitArray32.BitCount: 
  - id: WizardWrx.BitHelpers
    commentId: T:WizardWrx.BitHelpers
    language: CSharp
    name:
      CSharp: BitHelpers
      VB: BitHelpers
    nameWithType:
      CSharp: BitHelpers
      VB: BitHelpers
    qualifiedName:
      CSharp: WizardWrx.BitHelpers
      VB: WizardWrx.BitHelpers
    type: Class
    assemblies:
    - WizardWrx.BitMath
    namespace: WizardWrx
    source:
      id: BitHelpers
      path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitHelpers.cs
      startLine: 88
    summary: "\nThis static class defines utility methods to support formatting of\nintegral data types as arrays of individual bits, along with embedded\nread-only data structures to support their work.\n"
    example: []
    syntax:
      content:
        CSharp: public static class BitHelpers
        VB: Public Module BitHelpers
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - static
      - class
      VB:
      - Public
      - Module
    items:
    - id: WizardWrx.BitHelpers.InfoForIntegralType(System.Type)
      commentId: M:WizardWrx.BitHelpers.InfoForIntegralType(System.Type)
      language: CSharp
      name:
        CSharp: InfoForIntegralType(Type)
        VB: InfoForIntegralType(Type)
      nameWithType:
        CSharp: BitHelpers.InfoForIntegralType(Type)
        VB: BitHelpers.InfoForIntegralType(Type)
      qualifiedName:
        CSharp: WizardWrx.BitHelpers.InfoForIntegralType(System.Type)
        VB: WizardWrx.BitHelpers.InfoForIntegralType(System.Type)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: InfoForIntegralType
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitHelpers.cs
        startLine: 731
      summary: "\nGet the BCLIntegerTypeInfo for a specified type.\n"
      example: []
      syntax:
        content:
          CSharp: public static BCLIntegerTypeInfo InfoForIntegralType(Type ptypForThisType)
          VB: Public Shared Function InfoForIntegralType(ptypForThisType As Type) As BCLIntegerTypeInfo
        parameters:
        - id: ptypForThisType
          type: System.Type
          description: "\nSpecify the Type for which BCLIntegerTypeInfo is required. The\nTypeHandle is extracted and used as the index.\n"
        return:
          type: WizardWrx.BCLIntegerTypeInfo
          description: "\nIf the function succeeds, the return value is the desired\nBCLIntegerTypeInfo object. Otherwise, the return value is null.\n"
      overload: WizardWrx.BitHelpers.InfoForIntegralType*
      modifiers:
        CSharp:
        - public
        - static
        VB:
        - Public
        - Shared
  - id: WizardWrx.BitMaskAndRuler
    commentId: T:WizardWrx.BitMaskAndRuler
    language: CSharp
    name:
      CSharp: BitMaskAndRuler
      VB: BitMaskAndRuler
    nameWithType:
      CSharp: BitMaskAndRuler
      VB: BitMaskAndRuler
    qualifiedName:
      CSharp: WizardWrx.BitMaskAndRuler
      VB: WizardWrx.BitMaskAndRuler
    type: Class
    assemblies:
    - WizardWrx.BitMath
    namespace: WizardWrx
    source:
      id: BitMaskAndRuler
      path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
      startLine: 76
    summary: "\nInstances of this class keep a bit mask and a correctly oriented ruler\ntogether.\n"
    example: []
    syntax:
      content:
        CSharp: public class BitMaskAndRuler
        VB: Public Class BitMaskAndRuler
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: WizardWrx.BitMaskAndRuler.DISPLAY_TENS_ROW
      commentId: F:WizardWrx.BitMaskAndRuler.DISPLAY_TENS_ROW
      language: CSharp
      name:
        CSharp: DISPLAY_TENS_ROW
        VB: DISPLAY_TENS_ROW
      nameWithType:
        CSharp: BitMaskAndRuler.DISPLAY_TENS_ROW
        VB: BitMaskAndRuler.DISPLAY_TENS_ROW
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.DISPLAY_TENS_ROW
        VB: WizardWrx.BitMaskAndRuler.DISPLAY_TENS_ROW
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: DISPLAY_TENS_ROW
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 83
      summary: "\nThis constant represents the element in the string array returned by\nthe DisplayBitMask method that points to the tens row of the ruler.\n"
      example: []
      syntax:
        content:
          CSharp: public const int DISPLAY_TENS_ROW = 0
          VB: Public Const DISPLAY_TENS_ROW As Integer = 0
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitMaskAndRuler.DISPLAY_UNITS_ROW
      commentId: F:WizardWrx.BitMaskAndRuler.DISPLAY_UNITS_ROW
      language: CSharp
      name:
        CSharp: DISPLAY_UNITS_ROW
        VB: DISPLAY_UNITS_ROW
      nameWithType:
        CSharp: BitMaskAndRuler.DISPLAY_UNITS_ROW
        VB: BitMaskAndRuler.DISPLAY_UNITS_ROW
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.DISPLAY_UNITS_ROW
        VB: WizardWrx.BitMaskAndRuler.DISPLAY_UNITS_ROW
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: DISPLAY_UNITS_ROW
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 91
      summary: "\nThis constant represents the element in the string array returned by\nthe DisplayBitMask method that points to the units row of the ruler,\nwhich is shown below the tens row of the ruler.\n"
      example: []
      syntax:
        content:
          CSharp: public const int DISPLAY_UNITS_ROW = 1
          VB: Public Const DISPLAY_UNITS_ROW As Integer = 1
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitMaskAndRuler.DISPLAY_BITS_ROW
      commentId: F:WizardWrx.BitMaskAndRuler.DISPLAY_BITS_ROW
      language: CSharp
      name:
        CSharp: DISPLAY_BITS_ROW
        VB: DISPLAY_BITS_ROW
      nameWithType:
        CSharp: BitMaskAndRuler.DISPLAY_BITS_ROW
        VB: BitMaskAndRuler.DISPLAY_BITS_ROW
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.DISPLAY_BITS_ROW
        VB: WizardWrx.BitMaskAndRuler.DISPLAY_BITS_ROW
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: DISPLAY_BITS_ROW
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 99
      summary: "\nThis constant represents the element in the string array returned by\nthe DisplayBitMask method that points to the bit array row, which is\nshown below the units row of the ruler.\n"
      example: []
      syntax:
        content:
          CSharp: public const int DISPLAY_BITS_ROW = 2
          VB: Public Const DISPLAY_BITS_ROW As Integer = 2
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitMaskAndRuler.DISPLAY_ROW_COUNT
      commentId: F:WizardWrx.BitMaskAndRuler.DISPLAY_ROW_COUNT
      language: CSharp
      name:
        CSharp: DISPLAY_ROW_COUNT
        VB: DISPLAY_ROW_COUNT
      nameWithType:
        CSharp: BitMaskAndRuler.DISPLAY_ROW_COUNT
        VB: BitMaskAndRuler.DISPLAY_ROW_COUNT
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.DISPLAY_ROW_COUNT
        VB: WizardWrx.BitMaskAndRuler.DISPLAY_ROW_COUNT
      type: Field
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: DISPLAY_ROW_COUNT
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 106
      summary: "\nThis constant represents the number of elements in the string array\nreturned by the \n"
      example: []
      syntax:
        content:
          CSharp: public const int DISPLAY_ROW_COUNT = 3
          VB: Public Const DISPLAY_ROW_COUNT As Integer = 3
        return:
          type: System.Int32
      modifiers:
        CSharp:
        - public
        - const
        VB:
        - Public
        - Const
    - id: WizardWrx.BitMaskAndRuler.#ctor(System.Byte,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitMaskAndRuler.#ctor(System.Byte,WizardWrx.BitArray32.BitDisplayOrder)
      language: CSharp
      name:
        CSharp: BitMaskAndRuler(Byte, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler(Byte, BitArray32.BitDisplayOrder)
      nameWithType:
        CSharp: BitMaskAndRuler.BitMaskAndRuler(Byte, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler.BitMaskAndRuler(Byte, BitArray32.BitDisplayOrder)
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.Byte, WizardWrx.BitArray32.BitDisplayOrder)
        VB: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.Byte, WizardWrx.BitArray32.BitDisplayOrder)
      type: Constructor
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: .ctor
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 132
      summary: "\nConstruct a bit mask from any integral type. In this context, a Byte\nis treated as an unsigned integer of 8 bits.\n"
      example: []
      syntax:
        content:
          CSharp: public BitMaskAndRuler(byte pbytBitMask, BitArray32.BitDisplayOrder penmBitDisplayOrder)
          VB: Public Sub New(pbytBitMask As Byte, penmBitDisplayOrder As BitArray32.BitDisplayOrder)
        parameters:
        - id: pbytBitMask
          type: System.Byte
          description: "\nSpecify the Byte (Unsigned 8 bit integer) to treat as a bit mask.\n"
        - id: penmBitDisplayOrder
          type: WizardWrx.BitArray32.BitDisplayOrder
          description: "\nIndicate the direction in which the ruler should be displayed. See\nthe XML documentation for the BitDisplayOrder enumeration for a full\nexplanation of each value.\n"
      overload: WizardWrx.BitMaskAndRuler.#ctor*
      see:
      - linkId: WizardWrx.BitArray32.BitDisplayOrder
        commentId: T:WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitArray32.BitDisplayOrder: 
    - id: WizardWrx.BitMaskAndRuler.#ctor(System.UInt16,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitMaskAndRuler.#ctor(System.UInt16,WizardWrx.BitArray32.BitDisplayOrder)
      language: CSharp
      name:
        CSharp: BitMaskAndRuler(UInt16, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler(UInt16, BitArray32.BitDisplayOrder)
      nameWithType:
        CSharp: BitMaskAndRuler.BitMaskAndRuler(UInt16, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler.BitMaskAndRuler(UInt16, BitArray32.BitDisplayOrder)
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.UInt16, WizardWrx.BitArray32.BitDisplayOrder)
        VB: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.UInt16, WizardWrx.BitArray32.BitDisplayOrder)
      type: Constructor
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: .ctor
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 156
      summary: "\nConstruct a bit mask from any integral type. In this context, a Byte\nis treated as an unsigned integer of 8 bits.\n"
      example: []
      syntax:
        content:
          CSharp: public BitMaskAndRuler(ushort puintBitMask, BitArray32.BitDisplayOrder penmBitDisplayOrder)
          VB: Public Sub New(puintBitMask As UShort, penmBitDisplayOrder As BitArray32.BitDisplayOrder)
        parameters:
        - id: puintBitMask
          type: System.UInt16
          description: "\nSpecify the UInt16 (Unsigned 16 bit integer) to treat as a bit mask.\n"
        - id: penmBitDisplayOrder
          type: WizardWrx.BitArray32.BitDisplayOrder
          description: "\nIndicate the direction in which the ruler should be displayed. See\nthe XML documentation for the BitDisplayOrder enumeration for a full\nexplanation of each value.\n"
      overload: WizardWrx.BitMaskAndRuler.#ctor*
      see:
      - linkId: WizardWrx.BitArray32.BitDisplayOrder
        commentId: T:WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitArray32.BitDisplayOrder: 
    - id: WizardWrx.BitMaskAndRuler.#ctor(System.UInt32,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitMaskAndRuler.#ctor(System.UInt32,WizardWrx.BitArray32.BitDisplayOrder)
      language: CSharp
      name:
        CSharp: BitMaskAndRuler(UInt32, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler(UInt32, BitArray32.BitDisplayOrder)
      nameWithType:
        CSharp: BitMaskAndRuler.BitMaskAndRuler(UInt32, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler.BitMaskAndRuler(UInt32, BitArray32.BitDisplayOrder)
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.UInt32, WizardWrx.BitArray32.BitDisplayOrder)
        VB: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.UInt32, WizardWrx.BitArray32.BitDisplayOrder)
      type: Constructor
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: .ctor
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 180
      summary: "\nConstruct a bit mask from any integral type. In this context, a Byte\nis treated as an unsigned integer of 8 bits.\n"
      example: []
      syntax:
        content:
          CSharp: public BitMaskAndRuler(uint puintBitMask, BitArray32.BitDisplayOrder penmBitDisplayOrder)
          VB: Public Sub New(puintBitMask As UInteger, penmBitDisplayOrder As BitArray32.BitDisplayOrder)
        parameters:
        - id: puintBitMask
          type: System.UInt32
          description: "\nSpecify the UInt32 (Unsigned 32 bit integer) to treat as a bit mask.\n"
        - id: penmBitDisplayOrder
          type: WizardWrx.BitArray32.BitDisplayOrder
          description: "\nIndicate the direction in which the ruler should be displayed. See\nthe XML documentation for the BitDisplayOrder enumeration for a full\nexplanation of each value.\n"
      overload: WizardWrx.BitMaskAndRuler.#ctor*
      see:
      - linkId: WizardWrx.BitArray32.BitDisplayOrder
        commentId: T:WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitArray32.BitDisplayOrder: 
    - id: WizardWrx.BitMaskAndRuler.#ctor(System.UInt64,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitMaskAndRuler.#ctor(System.UInt64,WizardWrx.BitArray32.BitDisplayOrder)
      language: CSharp
      name:
        CSharp: BitMaskAndRuler(UInt64, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler(UInt64, BitArray32.BitDisplayOrder)
      nameWithType:
        CSharp: BitMaskAndRuler.BitMaskAndRuler(UInt64, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler.BitMaskAndRuler(UInt64, BitArray32.BitDisplayOrder)
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.UInt64, WizardWrx.BitArray32.BitDisplayOrder)
        VB: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.UInt64, WizardWrx.BitArray32.BitDisplayOrder)
      type: Constructor
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: .ctor
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 204
      summary: "\nConstruct a bit mask from any integral type. In this context, a Byte\nis treated as an unsigned integer of 8 bits.\n"
      example: []
      syntax:
        content:
          CSharp: public BitMaskAndRuler(ulong puintBitMask, BitArray32.BitDisplayOrder penmBitDisplayOrder)
          VB: Public Sub New(puintBitMask As ULong, penmBitDisplayOrder As BitArray32.BitDisplayOrder)
        parameters:
        - id: puintBitMask
          type: System.UInt64
          description: "\nSpecify the UInt64 (Unsigned 64 bit integer) to treat as a bit mask.\n"
        - id: penmBitDisplayOrder
          type: WizardWrx.BitArray32.BitDisplayOrder
          description: "\nIndicate the direction in which the ruler should be displayed. See\nthe XML documentation for the BitDisplayOrder enumeration for a full\nexplanation of each value.\n"
      overload: WizardWrx.BitMaskAndRuler.#ctor*
      see:
      - linkId: WizardWrx.BitArray32.BitDisplayOrder
        commentId: T:WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitArray32.BitDisplayOrder: 
    - id: WizardWrx.BitMaskAndRuler.#ctor(System.Int16,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitMaskAndRuler.#ctor(System.Int16,WizardWrx.BitArray32.BitDisplayOrder)
      language: CSharp
      name:
        CSharp: BitMaskAndRuler(Int16, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler(Int16, BitArray32.BitDisplayOrder)
      nameWithType:
        CSharp: BitMaskAndRuler.BitMaskAndRuler(Int16, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler.BitMaskAndRuler(Int16, BitArray32.BitDisplayOrder)
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.Int16, WizardWrx.BitArray32.BitDisplayOrder)
        VB: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.Int16, WizardWrx.BitArray32.BitDisplayOrder)
      type: Constructor
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: .ctor
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 227
      summary: "\nConstruct a bit mask from any integral type. In this context, a Byte\nis treated as an unsigned integer of 8 bits.\n"
      example: []
      syntax:
        content:
          CSharp: public BitMaskAndRuler(short pintBitMask, BitArray32.BitDisplayOrder penmBitDisplayOrder)
          VB: Public Sub New(pintBitMask As Short, penmBitDisplayOrder As BitArray32.BitDisplayOrder)
        parameters:
        - id: pintBitMask
          type: System.Int16
          description: "\nSpecify the Int16 (Signed 16 bit integer) to treat as a bit mask.\n"
        - id: penmBitDisplayOrder
          type: WizardWrx.BitArray32.BitDisplayOrder
          description: "\nIndicate the direction in which the ruler should be displayed. See\nthe XML documentation for the BitDisplayOrder enumeration for a full\nexplanation of each value.\n"
      overload: WizardWrx.BitMaskAndRuler.#ctor*
      see:
      - linkId: WizardWrx.BitArray32.BitDisplayOrder
        commentId: T:WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitArray32.BitDisplayOrder: 
    - id: WizardWrx.BitMaskAndRuler.#ctor(System.Int32,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitMaskAndRuler.#ctor(System.Int32,WizardWrx.BitArray32.BitDisplayOrder)
      language: CSharp
      name:
        CSharp: BitMaskAndRuler(Int32, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler(Int32, BitArray32.BitDisplayOrder)
      nameWithType:
        CSharp: BitMaskAndRuler.BitMaskAndRuler(Int32, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler.BitMaskAndRuler(Int32, BitArray32.BitDisplayOrder)
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.Int32, WizardWrx.BitArray32.BitDisplayOrder)
        VB: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.Int32, WizardWrx.BitArray32.BitDisplayOrder)
      type: Constructor
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: .ctor
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 251
      summary: "\nConstruct a bit mask from any integral type. In this context, a Byte\nis treated as an unsigned integer of 8 bits.\n"
      example: []
      syntax:
        content:
          CSharp: public BitMaskAndRuler(int pintBitMask, BitArray32.BitDisplayOrder penmBitDisplayOrder)
          VB: Public Sub New(pintBitMask As Integer, penmBitDisplayOrder As BitArray32.BitDisplayOrder)
        parameters:
        - id: pintBitMask
          type: System.Int32
          description: "\nSpecify the Int32 (Signed 32 bit integer) to treat as a bit mask.\n"
        - id: penmBitDisplayOrder
          type: WizardWrx.BitArray32.BitDisplayOrder
          description: "\nIndicate the direction in which the ruler should be displayed. See\nthe XML documentation for the BitDisplayOrder enumeration for a full\nexplanation of each value.\n"
      overload: WizardWrx.BitMaskAndRuler.#ctor*
      see:
      - linkId: WizardWrx.BitArray32.BitDisplayOrder
        commentId: T:WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitArray32.BitDisplayOrder: 
    - id: WizardWrx.BitMaskAndRuler.#ctor(System.Int64,WizardWrx.BitArray32.BitDisplayOrder)
      commentId: M:WizardWrx.BitMaskAndRuler.#ctor(System.Int64,WizardWrx.BitArray32.BitDisplayOrder)
      language: CSharp
      name:
        CSharp: BitMaskAndRuler(Int64, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler(Int64, BitArray32.BitDisplayOrder)
      nameWithType:
        CSharp: BitMaskAndRuler.BitMaskAndRuler(Int64, BitArray32.BitDisplayOrder)
        VB: BitMaskAndRuler.BitMaskAndRuler(Int64, BitArray32.BitDisplayOrder)
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.Int64, WizardWrx.BitArray32.BitDisplayOrder)
        VB: WizardWrx.BitMaskAndRuler.BitMaskAndRuler(System.Int64, WizardWrx.BitArray32.BitDisplayOrder)
      type: Constructor
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: .ctor
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 275
      summary: "\nConstruct a bit mask from any integral type. In this context, a Byte\nis treated as an unsigned integer of 8 bits.\n"
      example: []
      syntax:
        content:
          CSharp: public BitMaskAndRuler(long pintBitMask, BitArray32.BitDisplayOrder penmBitDisplayOrder)
          VB: Public Sub New(pintBitMask As Long, penmBitDisplayOrder As BitArray32.BitDisplayOrder)
        parameters:
        - id: pintBitMask
          type: System.Int64
          description: "\nSpecify the Int64 (Signed 64 bit integer) to treat as a bit mask.\n"
        - id: penmBitDisplayOrder
          type: WizardWrx.BitArray32.BitDisplayOrder
          description: "\nIndicate the direction in which the ruler should be displayed. See\nthe XML documentation for the BitDisplayOrder enumeration for a full\nexplanation of each value.\n"
      overload: WizardWrx.BitMaskAndRuler.#ctor*
      see:
      - linkId: WizardWrx.BitArray32.BitDisplayOrder
        commentId: T:WizardWrx.BitArray32.BitDisplayOrder
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitArray32.BitDisplayOrder: 
    - id: WizardWrx.BitMaskAndRuler.ArrayOfBits
      commentId: P:WizardWrx.BitMaskAndRuler.ArrayOfBits
      language: CSharp
      name:
        CSharp: ArrayOfBits
        VB: ArrayOfBits
      nameWithType:
        CSharp: BitMaskAndRuler.ArrayOfBits
        VB: BitMaskAndRuler.ArrayOfBits
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.ArrayOfBits
        VB: WizardWrx.BitMaskAndRuler.ArrayOfBits
      type: Property
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: ArrayOfBits
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 291
      summary: "\nThis property gets the string that contains the array of bits.\n"
      example: []
      syntax:
        content:
          CSharp: public string ArrayOfBits { get; }
          VB: Public ReadOnly Property ArrayOfBits As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.BitMaskAndRuler.ArrayOfBits*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.BitMaskAndRuler.DecimalRepresentation
      commentId: P:WizardWrx.BitMaskAndRuler.DecimalRepresentation
      language: CSharp
      name:
        CSharp: DecimalRepresentation
        VB: DecimalRepresentation
      nameWithType:
        CSharp: BitMaskAndRuler.DecimalRepresentation
        VB: BitMaskAndRuler.DecimalRepresentation
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.DecimalRepresentation
        VB: WizardWrx.BitMaskAndRuler.DecimalRepresentation
      type: Property
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: DecimalRepresentation
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 304
      summary: "\nThis property gets the decimal representation of the integral bit\nmask.\n"
      example: []
      syntax:
        content:
          CSharp: public string DecimalRepresentation { get; }
          VB: Public ReadOnly Property DecimalRepresentation As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.BitMaskAndRuler.DecimalRepresentation*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.BitMaskAndRuler.HexadecimalRepresentation
      commentId: P:WizardWrx.BitMaskAndRuler.HexadecimalRepresentation
      language: CSharp
      name:
        CSharp: HexadecimalRepresentation
        VB: HexadecimalRepresentation
      nameWithType:
        CSharp: BitMaskAndRuler.HexadecimalRepresentation
        VB: BitMaskAndRuler.HexadecimalRepresentation
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.HexadecimalRepresentation
        VB: WizardWrx.BitMaskAndRuler.HexadecimalRepresentation
      type: Property
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: HexadecimalRepresentation
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 317
      summary: "\nThis property gets the hexadecimal representation of the integral\nbit mask.\n"
      example: []
      syntax:
        content:
          CSharp: public string HexadecimalRepresentation { get; }
          VB: Public ReadOnly Property HexadecimalRepresentation As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.BitMaskAndRuler.HexadecimalRepresentation*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.BitMaskAndRuler.Tens
      commentId: P:WizardWrx.BitMaskAndRuler.Tens
      language: CSharp
      name:
        CSharp: Tens
        VB: Tens
      nameWithType:
        CSharp: BitMaskAndRuler.Tens
        VB: BitMaskAndRuler.Tens
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.Tens
        VB: WizardWrx.BitMaskAndRuler.Tens
      type: Property
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Tens
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 329
      summary: "\nThis property gets the Tens row of the ruler.\n"
      example: []
      syntax:
        content:
          CSharp: public string Tens { get; }
          VB: Public ReadOnly Property Tens As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.BitMaskAndRuler.Tens*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.BitMaskAndRuler.Units
      commentId: P:WizardWrx.BitMaskAndRuler.Units
      language: CSharp
      name:
        CSharp: Units
        VB: Units
      nameWithType:
        CSharp: BitMaskAndRuler.Units
        VB: BitMaskAndRuler.Units
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.Units
        VB: WizardWrx.BitMaskAndRuler.Units
      type: Property
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: Units
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 341
      summary: "\nThis property gets the Units row of the ruler.\n"
      example: []
      syntax:
        content:
          CSharp: public string Units { get; }
          VB: Public ReadOnly Property Units As String
        parameters: []
        return:
          type: System.String
      overload: WizardWrx.BitMaskAndRuler.Units*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
      commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
      language: CSharp
      name:
        CSharp: DisplayBitMaskFromArray()
        VB: DisplayBitMaskFromArray()
      nameWithType:
        CSharp: BitMaskAndRuler.DisplayBitMaskFromArray()
        VB: BitMaskAndRuler.DisplayBitMaskFromArray()
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray()
        VB: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray()
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: DisplayBitMaskFromArray
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 363
      summary: "\nThis method returns the three elements that are intended to be\ndisplayed as a unit.\n"
      example: []
      syntax:
        content:
          CSharp: public string[] DisplayBitMaskFromArray()
          VB: Public Function DisplayBitMaskFromArray As String()
        return:
          type: System.String[]
          description: "\nThe return value is an array of strings, which always contains\nexactly three elements containing the tens row of the ruler, the\nunits row of the ruler, and the bit array, in that order.\n"
      overload: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray*
      seealso:
      - linkId: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString
        commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString
      - linkId: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString(System.Int32)
        commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString(System.Int32)
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString: 
        WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString(System.Int32): 
    - id: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString
      commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString
      language: CSharp
      name:
        CSharp: DisplayBitMaskFromMultilineString()
        VB: DisplayBitMaskFromMultilineString()
      nameWithType:
        CSharp: BitMaskAndRuler.DisplayBitMaskFromMultilineString()
        VB: BitMaskAndRuler.DisplayBitMaskFromMultilineString()
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString()
        VB: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString()
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: DisplayBitMaskFromMultilineString
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 385
      summary: "\nThis method returns the three elements that are intended to be\ndisplayed as a unit as a multi-line string.\n"
      example: []
      syntax:
        content:
          CSharp: public string DisplayBitMaskFromMultilineString()
          VB: Public Function DisplayBitMaskFromMultilineString As String
        return:
          type: System.String
          description: "\nUnlike companion method DisplayBitMaskFromArray, this method returns\none long string, WITH each line EXCEPT the last one terminated with\na newline.\n"
      overload: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString*
      seealso:
      - linkId: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
        commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray: 
    - id: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString(System.Int32)
      commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString(System.Int32)
      language: CSharp
      name:
        CSharp: DisplayBitMaskFromMultilineString(Int32)
        VB: DisplayBitMaskFromMultilineString(Int32)
      nameWithType:
        CSharp: BitMaskAndRuler.DisplayBitMaskFromMultilineString(Int32)
        VB: BitMaskAndRuler.DisplayBitMaskFromMultilineString(Int32)
      qualifiedName:
        CSharp: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString(System.Int32)
        VB: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString(System.Int32)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: DisplayBitMaskFromMultilineString
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskAndRuler.cs
        startLine: 414
      summary: "\nThis method returns the three elements that are intended to be\ndisplayed as a unit as a multi-line string.\n"
      example: []
      syntax:
        content:
          CSharp: public string DisplayBitMaskFromMultilineString(int pintNLeadingSpaces)
          VB: Public Function DisplayBitMaskFromMultilineString(pintNLeadingSpaces As Integer) As String
        parameters:
        - id: pintNLeadingSpaces
          type: System.Int32
          description: "\nSpecify the number of leading spaces to insert in front of each of\nthe three lines.\n"
        return:
          type: System.String
          description: "\nUnlike companion method DisplayBitMaskFromArray, this method returns\none long string, WITH each line EXCEPT the last one terminated with\na newline.\n"
      overload: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString*
      seealso:
      - linkId: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
        commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray: 
  - id: WizardWrx.BitMaskFormat
    commentId: T:WizardWrx.BitMaskFormat
    language: CSharp
    name:
      CSharp: BitMaskFormat
      VB: BitMaskFormat
    nameWithType:
      CSharp: BitMaskFormat
      VB: BitMaskFormat
    qualifiedName:
      CSharp: WizardWrx.BitMaskFormat
      VB: WizardWrx.BitMaskFormat
    type: Class
    assemblies:
    - WizardWrx.BitMath
    namespace: WizardWrx
    source:
      id: BitMaskFormat
      path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskFormat.cs
      startLine: 78
    summary: "\nA default instance of this class is fed into an overload of \nstring.Format to render the bit array.\n"
    example: []
    syntax:
      content:
        CSharp: 'public class BitMaskFormat : IFormatProvider, ICustomFormatter'
        VB: >-
          Public Class BitMaskFormat

              Implements IFormatProvider, ICustomFormatter
    inheritance:
    - System.Object
    implements:
    - System.IFormatProvider
    - System.ICustomFormatter
    inheritedMembers:
    - System.Object.ToString
    - System.Object.Equals(System.Object)
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetHashCode
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - isEii: true
      id: WizardWrx.BitMaskFormat.System#ICustomFormatter#Format(System.String,System.Object,System.IFormatProvider)
      commentId: M:WizardWrx.BitMaskFormat.System#ICustomFormatter#Format(System.String,System.Object,System.IFormatProvider)
      language: CSharp
      name:
        CSharp: ICustomFormatter.Format(String, Object, IFormatProvider)
        VB: System.ICustomFormatter.Format(String, Object, IFormatProvider)
      nameWithType:
        CSharp: BitMaskFormat.ICustomFormatter.Format(String, Object, IFormatProvider)
        VB: BitMaskFormat.System.ICustomFormatter.Format(String, Object, IFormatProvider)
      qualifiedName:
        CSharp: WizardWrx.BitMaskFormat.System.ICustomFormatter.Format(System.String, System.Object, System.IFormatProvider)
        VB: WizardWrx.BitMaskFormat.System.ICustomFormatter.Format(System.String, System.Object, System.IFormatProvider)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: System.ICustomFormatter.Format
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskFormat.cs
        startLine: 108
      summary: "\nFormat integral types as arrays of bits. Other types are handed off\nto the system formatting engine.\n"
      example: []
      syntax:
        content:
          CSharp: string ICustomFormatter.Format(string format, object arg, IFormatProvider formatProvider)
          VB: Function System.ICustomFormatter.Format(format As String, arg As Object, formatProvider As IFormatProvider) As String Implements ICustomFormatter.Format
        parameters:
        - id: format
          type: System.String
          description: "\nSpecify the format string to apply. This method supports a custom\nformat code, B, and the standard G code.\n"
        - id: arg
          type: System.Object
          description: "\nSpecify the integral type to format.\n"
        - id: formatProvider
          type: System.IFormatProvider
          description: "\nSpecify the accompanying format provider.\n"
        return:
          type: System.String
          description: "\nIf the method succeeds and the format code is B, the return value is\na string that represents the integral type as a string of bits, \nlisted from most significant to least.\n\nIf the method succeeds and the format code is G, the return value is\na hexadecimal representation of the integer, sufficiently padded to\nhold the maximum value supported by an integer of the specified type.\n\nAll other cases are handed over to the default formatting engine and\nthe outcome is undefined, since it depends upon the behavior of a\ncomponent that is outside of my control.\n"
      overload: WizardWrx.BitMaskFormat.System#ICustomFormatter#Format*
      implements:
      - System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)
      modifiers:
        CSharp: []
        VB: []
    - isEii: true
      id: WizardWrx.BitMaskFormat.System#IFormatProvider#GetFormat(System.Type)
      commentId: M:WizardWrx.BitMaskFormat.System#IFormatProvider#GetFormat(System.Type)
      language: CSharp
      name:
        CSharp: IFormatProvider.GetFormat(Type)
        VB: System.IFormatProvider.GetFormat(Type)
      nameWithType:
        CSharp: BitMaskFormat.IFormatProvider.GetFormat(Type)
        VB: BitMaskFormat.System.IFormatProvider.GetFormat(Type)
      qualifiedName:
        CSharp: WizardWrx.BitMaskFormat.System.IFormatProvider.GetFormat(System.Type)
        VB: WizardWrx.BitMaskFormat.System.IFormatProvider.GetFormat(System.Type)
      type: Method
      assemblies:
      - WizardWrx.BitMath
      namespace: WizardWrx
      source:
        id: System.IFormatProvider.GetFormat
        path: F:\Source_Code\Visual_Studio\Projects\WizardWrx_Libs\BitMath\BitMath\BitMaskFormat.cs
        startLine: 210
      summary: "\nThis method implements the IFormatProvider provider interface on\nbehalf of the BitMaskFormat class.\n"
      example: []
      syntax:
        content:
          CSharp: object IFormatProvider.GetFormat(Type formatType)
          VB: Function System.IFormatProvider.GetFormat(formatType As Type) As Object Implements IFormatProvider.GetFormat
        parameters:
        - id: formatType
          type: System.Type
          description: "\nProvided that the type of formatType is ICustomFormatter, return the\ninstance of BitMaskFormat on behalf of which this method was called.\n"
        return:
          type: System.Object
          description: "\nIf formatType is valid, the return value is a reference to the\ninstance of BitMaskFormat on behalf of which this method was called.\nOtherwise, a null reference is returned.\n"
      overload: WizardWrx.BitMaskFormat.System#IFormatProvider#GetFormat*
      implements:
      - System.IFormatProvider.GetFormat(System.Type)
      modifiers:
        CSharp: []
        VB: []
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  WizardWrx.BCLIntegerTypeInfo.Equals*:
    name:
      CSharp:
      - id: WizardWrx.BCLIntegerTypeInfo.Equals*
        name: Equals
        nameWithType: BCLIntegerTypeInfo.Equals
        qualifiedName: WizardWrx.BCLIntegerTypeInfo.Equals
      VB:
      - id: WizardWrx.BCLIntegerTypeInfo.Equals*
        name: Equals
        nameWithType: BCLIntegerTypeInfo.Equals
        qualifiedName: WizardWrx.BCLIntegerTypeInfo.Equals
    isDefinition: true
    commentId: Overload:WizardWrx.BCLIntegerTypeInfo.Equals
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  WizardWrx.BCLIntegerTypeInfo.GetHashCode*:
    name:
      CSharp:
      - id: WizardWrx.BCLIntegerTypeInfo.GetHashCode*
        name: GetHashCode
        nameWithType: BCLIntegerTypeInfo.GetHashCode
        qualifiedName: WizardWrx.BCLIntegerTypeInfo.GetHashCode
      VB:
      - id: WizardWrx.BCLIntegerTypeInfo.GetHashCode*
        name: GetHashCode
        nameWithType: BCLIntegerTypeInfo.GetHashCode
        qualifiedName: WizardWrx.BCLIntegerTypeInfo.GetHashCode
    isDefinition: true
    commentId: Overload:WizardWrx.BCLIntegerTypeInfo.GetHashCode
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  WizardWrx.BCLIntegerTypeInfo.ToString*:
    name:
      CSharp:
      - id: WizardWrx.BCLIntegerTypeInfo.ToString*
        name: ToString
        nameWithType: BCLIntegerTypeInfo.ToString
        qualifiedName: WizardWrx.BCLIntegerTypeInfo.ToString
      VB:
      - id: WizardWrx.BCLIntegerTypeInfo.ToString*
        name: ToString
        nameWithType: BCLIntegerTypeInfo.ToString
        qualifiedName: WizardWrx.BCLIntegerTypeInfo.ToString
    isDefinition: true
    commentId: Overload:WizardWrx.BCLIntegerTypeInfo.ToString
  WizardWrx.BCLIntegerTypeInfo:
    name:
      CSharp:
      - id: WizardWrx.BCLIntegerTypeInfo
        name: BCLIntegerTypeInfo
        nameWithType: BCLIntegerTypeInfo
        qualifiedName: WizardWrx.BCLIntegerTypeInfo
      VB:
      - id: WizardWrx.BCLIntegerTypeInfo
        name: BCLIntegerTypeInfo
        nameWithType: BCLIntegerTypeInfo
        qualifiedName: WizardWrx.BCLIntegerTypeInfo
    isDefinition: true
    parent: WizardWrx
    commentId: T:WizardWrx.BCLIntegerTypeInfo
  System.UInt32:
    name:
      CSharp:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
      VB:
      - id: System.UInt32
        name: UInt32
        nameWithType: UInt32
        qualifiedName: System.UInt32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt32
  WizardWrx.BitArray32.#ctor*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.#ctor*
        name: BitArray32
        nameWithType: BitArray32.BitArray32
        qualifiedName: WizardWrx.BitArray32.BitArray32
      VB:
      - id: WizardWrx.BitArray32.#ctor*
        name: BitArray32
        nameWithType: BitArray32.BitArray32
        qualifiedName: WizardWrx.BitArray32.BitArray32
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.#ctor
  WizardWrx.BitArray32.BitOff*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.BitOff*
        name: BitOff
        nameWithType: BitArray32.BitOff
        qualifiedName: WizardWrx.BitArray32.BitOff
      VB:
      - id: WizardWrx.BitArray32.BitOff*
        name: BitOff
        nameWithType: BitArray32.BitOff
        qualifiedName: WizardWrx.BitArray32.BitOff
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.BitOff
  WizardWrx.BitArray32.BitOn*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.BitOn*
        name: BitOn
        nameWithType: BitArray32.BitOn
        qualifiedName: WizardWrx.BitArray32.BitOn
      VB:
      - id: WizardWrx.BitArray32.BitOn*
        name: BitOn
        nameWithType: BitArray32.BitOn
        qualifiedName: WizardWrx.BitArray32.BitOn
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.BitOn
  WizardWrx.BitArray32.IsBitOff*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.IsBitOff*
        name: IsBitOff
        nameWithType: BitArray32.IsBitOff
        qualifiedName: WizardWrx.BitArray32.IsBitOff
      VB:
      - id: WizardWrx.BitArray32.IsBitOff*
        name: IsBitOff
        nameWithType: BitArray32.IsBitOff
        qualifiedName: WizardWrx.BitArray32.IsBitOff
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.IsBitOff
  WizardWrx.BitArray32.IsBitOn*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.IsBitOn*
        name: IsBitOn
        nameWithType: BitArray32.IsBitOn
        qualifiedName: WizardWrx.BitArray32.IsBitOn
      VB:
      - id: WizardWrx.BitArray32.IsBitOn*
        name: IsBitOn
        nameWithType: BitArray32.IsBitOn
        qualifiedName: WizardWrx.BitArray32.IsBitOn
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.IsBitOn
  System.ArgumentOutOfRangeException:
    commentId: T:System.ArgumentOutOfRangeException
  WizardWrx.BitArray32.BitNumber*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.BitNumber*
        name: BitNumber
        nameWithType: BitArray32.BitNumber
        qualifiedName: WizardWrx.BitArray32.BitNumber
      VB:
      - id: WizardWrx.BitArray32.BitNumber*
        name: BitNumber
        nameWithType: BitArray32.BitNumber
        qualifiedName: WizardWrx.BitArray32.BitNumber
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.BitNumber
  WizardWrx.BitArray32.BitPosition*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.BitPosition*
        name: BitPosition
        nameWithType: BitArray32.BitPosition
        qualifiedName: WizardWrx.BitArray32.BitPosition
      VB:
      - id: WizardWrx.BitArray32.BitPosition*
        name: BitPosition
        nameWithType: BitArray32.BitPosition
        qualifiedName: WizardWrx.BitArray32.BitPosition
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.BitPosition
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  WizardWrx.BitArray32.FormatIntegerAsBitArray*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.FormatIntegerAsBitArray*
        name: FormatIntegerAsBitArray
        nameWithType: BitArray32.FormatIntegerAsBitArray
        qualifiedName: WizardWrx.BitArray32.FormatIntegerAsBitArray
      VB:
      - id: WizardWrx.BitArray32.FormatIntegerAsBitArray*
        name: FormatIntegerAsBitArray
        nameWithType: BitArray32.FormatIntegerAsBitArray
        qualifiedName: WizardWrx.BitArray32.FormatIntegerAsBitArray
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.FormatIntegerAsBitArray
  System.FormatException:
    commentId: T:System.FormatException
  WizardWrx.BitArray32.FormatIntegerAsHex*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.FormatIntegerAsHex*
        name: FormatIntegerAsHex
        nameWithType: BitArray32.FormatIntegerAsHex
        qualifiedName: WizardWrx.BitArray32.FormatIntegerAsHex
      VB:
      - id: WizardWrx.BitArray32.FormatIntegerAsHex*
        name: FormatIntegerAsHex
        nameWithType: BitArray32.FormatIntegerAsHex
        qualifiedName: WizardWrx.BitArray32.FormatIntegerAsHex
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.FormatIntegerAsHex
  WizardWrx.BitArray32.BitDisplayOrder:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.BitDisplayOrder
        name: BitArray32.BitDisplayOrder
        nameWithType: BitArray32.BitDisplayOrder
        qualifiedName: WizardWrx.BitArray32.BitDisplayOrder
      VB:
      - id: WizardWrx.BitArray32.BitDisplayOrder
        name: BitArray32.BitDisplayOrder
        nameWithType: BitArray32.BitDisplayOrder
        qualifiedName: WizardWrx.BitArray32.BitDisplayOrder
    isDefinition: true
    parent: WizardWrx
    commentId: T:WizardWrx.BitArray32.BitDisplayOrder
  WizardWrx.BitArray32.BitCount:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.BitCount
        name: BitArray32.BitCount
        nameWithType: BitArray32.BitCount
        qualifiedName: WizardWrx.BitArray32.BitCount
      VB:
      - id: WizardWrx.BitArray32.BitCount
        name: BitArray32.BitCount
        nameWithType: BitArray32.BitCount
        qualifiedName: WizardWrx.BitArray32.BitCount
    isDefinition: true
    parent: WizardWrx
    commentId: T:WizardWrx.BitArray32.BitCount
  WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder):
    commentId: M:WizardWrx.BitArray32.GetRulerUnits(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
  System.ComponentModel.InvalidEnumArgumentException:
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
  System.InvalidOperationException:
    commentId: T:System.InvalidOperationException
  WizardWrx:
    name:
      CSharp:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
      VB:
      - name: WizardWrx
        nameWithType: WizardWrx
        qualifiedName: WizardWrx
    isDefinition: true
    commentId: N:WizardWrx
  WizardWrx.BitArray32.GetRulerTens*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.GetRulerTens*
        name: GetRulerTens
        nameWithType: BitArray32.GetRulerTens
        qualifiedName: WizardWrx.BitArray32.GetRulerTens
      VB:
      - id: WizardWrx.BitArray32.GetRulerTens*
        name: GetRulerTens
        nameWithType: BitArray32.GetRulerTens
        qualifiedName: WizardWrx.BitArray32.GetRulerTens
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.GetRulerTens
  WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder):
    commentId: M:WizardWrx.BitArray32.GetRulerTens(WizardWrx.BitArray32.BitCount,WizardWrx.BitArray32.BitDisplayOrder)
  WizardWrx.BitArray32.GetRulerUnits*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.GetRulerUnits*
        name: GetRulerUnits
        nameWithType: BitArray32.GetRulerUnits
        qualifiedName: WizardWrx.BitArray32.GetRulerUnits
      VB:
      - id: WizardWrx.BitArray32.GetRulerUnits*
        name: GetRulerUnits
        nameWithType: BitArray32.GetRulerUnits
        qualifiedName: WizardWrx.BitArray32.GetRulerUnits
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.GetRulerUnits
  WizardWrx.BitArray32:
    name:
      CSharp:
      - id: WizardWrx.BitArray32
        name: BitArray32
        nameWithType: BitArray32
        qualifiedName: WizardWrx.BitArray32
      VB:
      - id: WizardWrx.BitArray32
        name: BitArray32
        nameWithType: BitArray32
        qualifiedName: WizardWrx.BitArray32
    isDefinition: true
    parent: WizardWrx
    commentId: T:WizardWrx.BitArray32
  WizardWrx.BitArray32.TurnBitOff*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.TurnBitOff*
        name: TurnBitOff
        nameWithType: BitArray32.TurnBitOff
        qualifiedName: WizardWrx.BitArray32.TurnBitOff
      VB:
      - id: WizardWrx.BitArray32.TurnBitOff*
        name: TurnBitOff
        nameWithType: BitArray32.TurnBitOff
        qualifiedName: WizardWrx.BitArray32.TurnBitOff
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.TurnBitOff
  WizardWrx.BitArray32.TurnBitOn*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.TurnBitOn*
        name: TurnBitOn
        nameWithType: BitArray32.TurnBitOn
        qualifiedName: WizardWrx.BitArray32.TurnBitOn
      VB:
      - id: WizardWrx.BitArray32.TurnBitOn*
        name: TurnBitOn
        nameWithType: BitArray32.TurnBitOn
        qualifiedName: WizardWrx.BitArray32.TurnBitOn
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.TurnBitOn
  WizardWrx.BitArray32.ToString*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.ToString*
        name: ToString
        nameWithType: BitArray32.ToString
        qualifiedName: WizardWrx.BitArray32.ToString
      VB:
      - id: WizardWrx.BitArray32.ToString*
        name: ToString
        nameWithType: BitArray32.ToString
        qualifiedName: WizardWrx.BitArray32.ToString
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.ToString
  WizardWrx.BitArray32.Equals*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.Equals*
        name: Equals
        nameWithType: BitArray32.Equals
        qualifiedName: WizardWrx.BitArray32.Equals
      VB:
      - id: WizardWrx.BitArray32.Equals*
        name: Equals
        nameWithType: BitArray32.Equals
        qualifiedName: WizardWrx.BitArray32.Equals
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.Equals
  WizardWrx.BitArray32.GetHashCode*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.GetHashCode*
        name: GetHashCode
        nameWithType: BitArray32.GetHashCode
        qualifiedName: WizardWrx.BitArray32.GetHashCode
      VB:
      - id: WizardWrx.BitArray32.GetHashCode*
        name: GetHashCode
        nameWithType: BitArray32.GetHashCode
        qualifiedName: WizardWrx.BitArray32.GetHashCode
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.GetHashCode
  WizardWrx.BitArray32.op_Equality*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.op_Equality*
        name: Equality
        nameWithType: BitArray32.Equality
        qualifiedName: WizardWrx.BitArray32.Equality
      VB:
      - id: WizardWrx.BitArray32.op_Equality*
        name: Equality
        nameWithType: BitArray32.Equality
        qualifiedName: WizardWrx.BitArray32.Equality
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.op_Equality
  WizardWrx.BitArray32.op_Inequality*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.op_Inequality*
        name: Inequality
        nameWithType: BitArray32.Inequality
        qualifiedName: WizardWrx.BitArray32.Inequality
      VB:
      - id: WizardWrx.BitArray32.op_Inequality*
        name: Inequality
        nameWithType: BitArray32.Inequality
        qualifiedName: WizardWrx.BitArray32.Inequality
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.op_Inequality
  WizardWrx.BitArray32.op_Implicit*:
    name:
      CSharp:
      - id: WizardWrx.BitArray32.op_Implicit*
        name: Implicit
        nameWithType: BitArray32.Implicit
        qualifiedName: WizardWrx.BitArray32.Implicit
      VB:
      - id: WizardWrx.BitArray32.op_Implicit*
        name: Widening
        nameWithType: BitArray32.Widening
        qualifiedName: WizardWrx.BitArray32.Widening
    isDefinition: true
    commentId: Overload:WizardWrx.BitArray32.op_Implicit
  System.Type:
    name:
      CSharp:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      VB:
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Type
  WizardWrx.BitHelpers.InfoForIntegralType*:
    name:
      CSharp:
      - id: WizardWrx.BitHelpers.InfoForIntegralType*
        name: InfoForIntegralType
        nameWithType: BitHelpers.InfoForIntegralType
        qualifiedName: WizardWrx.BitHelpers.InfoForIntegralType
      VB:
      - id: WizardWrx.BitHelpers.InfoForIntegralType*
        name: InfoForIntegralType
        nameWithType: BitHelpers.InfoForIntegralType
        qualifiedName: WizardWrx.BitHelpers.InfoForIntegralType
    isDefinition: true
    commentId: Overload:WizardWrx.BitHelpers.InfoForIntegralType
  WizardWrx.BitHelpers:
    name:
      CSharp:
      - id: WizardWrx.BitHelpers
        name: BitHelpers
        nameWithType: BitHelpers
        qualifiedName: WizardWrx.BitHelpers
      VB:
      - id: WizardWrx.BitHelpers
        name: BitHelpers
        nameWithType: BitHelpers
        qualifiedName: WizardWrx.BitHelpers
    isDefinition: true
    commentId: T:WizardWrx.BitHelpers
  System.Byte:
    name:
      CSharp:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
      VB:
      - id: System.Byte
        name: Byte
        nameWithType: Byte
        qualifiedName: System.Byte
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Byte
  WizardWrx.BitMaskAndRuler.#ctor*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskAndRuler.#ctor*
        name: BitMaskAndRuler
        nameWithType: BitMaskAndRuler.BitMaskAndRuler
        qualifiedName: WizardWrx.BitMaskAndRuler.BitMaskAndRuler
      VB:
      - id: WizardWrx.BitMaskAndRuler.#ctor*
        name: BitMaskAndRuler
        nameWithType: BitMaskAndRuler.BitMaskAndRuler
        qualifiedName: WizardWrx.BitMaskAndRuler.BitMaskAndRuler
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskAndRuler.#ctor
  System.UInt16:
    name:
      CSharp:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
      VB:
      - id: System.UInt16
        name: UInt16
        nameWithType: UInt16
        qualifiedName: System.UInt16
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt16
  System.UInt64:
    name:
      CSharp:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
      VB:
      - id: System.UInt64
        name: UInt64
        nameWithType: UInt64
        qualifiedName: System.UInt64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.UInt64
  System.Int16:
    name:
      CSharp:
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
      VB:
      - id: System.Int16
        name: Int16
        nameWithType: Int16
        qualifiedName: System.Int16
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int16
  System.Int64:
    name:
      CSharp:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
      VB:
      - id: System.Int64
        name: Int64
        nameWithType: Int64
        qualifiedName: System.Int64
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int64
  WizardWrx.BitMaskAndRuler.ArrayOfBits*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskAndRuler.ArrayOfBits*
        name: ArrayOfBits
        nameWithType: BitMaskAndRuler.ArrayOfBits
        qualifiedName: WizardWrx.BitMaskAndRuler.ArrayOfBits
      VB:
      - id: WizardWrx.BitMaskAndRuler.ArrayOfBits*
        name: ArrayOfBits
        nameWithType: BitMaskAndRuler.ArrayOfBits
        qualifiedName: WizardWrx.BitMaskAndRuler.ArrayOfBits
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskAndRuler.ArrayOfBits
  WizardWrx.BitMaskAndRuler.DecimalRepresentation*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskAndRuler.DecimalRepresentation*
        name: DecimalRepresentation
        nameWithType: BitMaskAndRuler.DecimalRepresentation
        qualifiedName: WizardWrx.BitMaskAndRuler.DecimalRepresentation
      VB:
      - id: WizardWrx.BitMaskAndRuler.DecimalRepresentation*
        name: DecimalRepresentation
        nameWithType: BitMaskAndRuler.DecimalRepresentation
        qualifiedName: WizardWrx.BitMaskAndRuler.DecimalRepresentation
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskAndRuler.DecimalRepresentation
  WizardWrx.BitMaskAndRuler.HexadecimalRepresentation*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskAndRuler.HexadecimalRepresentation*
        name: HexadecimalRepresentation
        nameWithType: BitMaskAndRuler.HexadecimalRepresentation
        qualifiedName: WizardWrx.BitMaskAndRuler.HexadecimalRepresentation
      VB:
      - id: WizardWrx.BitMaskAndRuler.HexadecimalRepresentation*
        name: HexadecimalRepresentation
        nameWithType: BitMaskAndRuler.HexadecimalRepresentation
        qualifiedName: WizardWrx.BitMaskAndRuler.HexadecimalRepresentation
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskAndRuler.HexadecimalRepresentation
  WizardWrx.BitMaskAndRuler.Tens*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskAndRuler.Tens*
        name: Tens
        nameWithType: BitMaskAndRuler.Tens
        qualifiedName: WizardWrx.BitMaskAndRuler.Tens
      VB:
      - id: WizardWrx.BitMaskAndRuler.Tens*
        name: Tens
        nameWithType: BitMaskAndRuler.Tens
        qualifiedName: WizardWrx.BitMaskAndRuler.Tens
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskAndRuler.Tens
  WizardWrx.BitMaskAndRuler.Units*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskAndRuler.Units*
        name: Units
        nameWithType: BitMaskAndRuler.Units
        qualifiedName: WizardWrx.BitMaskAndRuler.Units
      VB:
      - id: WizardWrx.BitMaskAndRuler.Units*
        name: Units
        nameWithType: BitMaskAndRuler.Units
        qualifiedName: WizardWrx.BitMaskAndRuler.Units
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskAndRuler.Units
  WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString:
    commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString
  WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString(System.Int32):
    commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString(System.Int32)
  System.String[]:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray*
        name: DisplayBitMaskFromArray
        nameWithType: BitMaskAndRuler.DisplayBitMaskFromArray
        qualifiedName: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
      VB:
      - id: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray*
        name: DisplayBitMaskFromArray
        nameWithType: BitMaskAndRuler.DisplayBitMaskFromArray
        qualifiedName: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
  WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray:
    commentId: M:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromArray
  WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString*
        name: DisplayBitMaskFromMultilineString
        nameWithType: BitMaskAndRuler.DisplayBitMaskFromMultilineString
        qualifiedName: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString
      VB:
      - id: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString*
        name: DisplayBitMaskFromMultilineString
        nameWithType: BitMaskAndRuler.DisplayBitMaskFromMultilineString
        qualifiedName: WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskAndRuler.DisplayBitMaskFromMultilineString
  WizardWrx.BitMaskAndRuler:
    name:
      CSharp:
      - id: WizardWrx.BitMaskAndRuler
        name: BitMaskAndRuler
        nameWithType: BitMaskAndRuler
        qualifiedName: WizardWrx.BitMaskAndRuler
      VB:
      - id: WizardWrx.BitMaskAndRuler
        name: BitMaskAndRuler
        nameWithType: BitMaskAndRuler
        qualifiedName: WizardWrx.BitMaskAndRuler
    isDefinition: true
    commentId: T:WizardWrx.BitMaskAndRuler
  System.IFormatProvider:
    name:
      CSharp:
      - id: System.IFormatProvider
        name: IFormatProvider
        nameWithType: IFormatProvider
        qualifiedName: System.IFormatProvider
        isExternal: true
      VB:
      - id: System.IFormatProvider
        name: IFormatProvider
        nameWithType: IFormatProvider
        qualifiedName: System.IFormatProvider
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.IFormatProvider
  System.ICustomFormatter:
    name:
      CSharp:
      - id: System.ICustomFormatter
        name: ICustomFormatter
        nameWithType: ICustomFormatter
        qualifiedName: System.ICustomFormatter
        isExternal: true
      VB:
      - id: System.ICustomFormatter
        name: ICustomFormatter
        nameWithType: ICustomFormatter
        qualifiedName: System.ICustomFormatter
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.ICustomFormatter
  WizardWrx.BitMaskFormat.System#ICustomFormatter#Format*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskFormat.System#ICustomFormatter#Format*
        name: ICustomFormatter.Format
        nameWithType: BitMaskFormat.ICustomFormatter.Format
        qualifiedName: WizardWrx.BitMaskFormat.System.ICustomFormatter.Format
      VB:
      - id: WizardWrx.BitMaskFormat.System#ICustomFormatter#Format*
        name: System.ICustomFormatter.Format
        nameWithType: BitMaskFormat.System.ICustomFormatter.Format
        qualifiedName: WizardWrx.BitMaskFormat.System.ICustomFormatter.Format
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskFormat.System#ICustomFormatter#Format
  System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider):
    name:
      CSharp:
      - id: System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)
        name: Format
        nameWithType: ICustomFormatter.Format
        qualifiedName: System.ICustomFormatter.Format
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IFormatProvider
        name: IFormatProvider
        nameWithType: IFormatProvider
        qualifiedName: System.IFormatProvider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)
        name: Format
        nameWithType: ICustomFormatter.Format
        qualifiedName: System.ICustomFormatter.Format
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.IFormatProvider
        name: IFormatProvider
        nameWithType: IFormatProvider
        qualifiedName: System.IFormatProvider
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.ICustomFormatter
    commentId: M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)
  WizardWrx.BitMaskFormat.System#IFormatProvider#GetFormat*:
    name:
      CSharp:
      - id: WizardWrx.BitMaskFormat.System#IFormatProvider#GetFormat*
        name: IFormatProvider.GetFormat
        nameWithType: BitMaskFormat.IFormatProvider.GetFormat
        qualifiedName: WizardWrx.BitMaskFormat.System.IFormatProvider.GetFormat
      VB:
      - id: WizardWrx.BitMaskFormat.System#IFormatProvider#GetFormat*
        name: System.IFormatProvider.GetFormat
        nameWithType: BitMaskFormat.System.IFormatProvider.GetFormat
        qualifiedName: WizardWrx.BitMaskFormat.System.IFormatProvider.GetFormat
    isDefinition: true
    commentId: Overload:WizardWrx.BitMaskFormat.System#IFormatProvider#GetFormat
  System.IFormatProvider.GetFormat(System.Type):
    name:
      CSharp:
      - id: System.IFormatProvider.GetFormat(System.Type)
        name: GetFormat
        nameWithType: IFormatProvider.GetFormat
        qualifiedName: System.IFormatProvider.GetFormat
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.IFormatProvider.GetFormat(System.Type)
        name: GetFormat
        nameWithType: IFormatProvider.GetFormat
        qualifiedName: System.IFormatProvider.GetFormat
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Type
        name: Type
        nameWithType: Type
        qualifiedName: System.Type
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.IFormatProvider
    commentId: M:System.IFormatProvider.GetFormat(System.Type)
  WizardWrx.BitMaskFormat:
    name:
      CSharp:
      - id: WizardWrx.BitMaskFormat
        name: BitMaskFormat
        nameWithType: BitMaskFormat
        qualifiedName: WizardWrx.BitMaskFormat
      VB:
      - id: WizardWrx.BitMaskFormat
        name: BitMaskFormat
        nameWithType: BitMaskFormat
        qualifiedName: WizardWrx.BitMaskFormat
    isDefinition: true
    commentId: T:WizardWrx.BitMaskFormat
