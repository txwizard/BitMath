<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BCLI_INDEX_TOSTRING_TEMPLATE" xml:space="preserve">
    <value>TypeHandle = {0}, Subscript = {1}</value>
    <comment>The ToString method override on instances of BCLIntegerTypeIndex uses this string as its template.</comment>
  </data>
  <data name="BCLI_TOSTRING_TEMPLATE" xml:space="preserve">
    <value>BCLType = {0}, MaximumDecimalDigits = {1}, RequiredStorageBytes = {2}, CapacityInBits = {3}, IsSigned = {4}, GUIDPerType = {5}</value>
    <comment>The ToString method override on instances of BCLIntegerTypeInfo uses this string to format a complete property display for the visual debugger.</comment>
  </data>
  <data name="BIT_RULER_TENS_HIGHTOLOW" xml:space="preserve">
    <value>   6         5         4         3         2         1          </value>
    <comment>This is the tens row of a ruler for displaying above normal (High to Low) bit masks This string contains exactly 64 characters, as does the corresponding units string.</comment>
  </data>
  <data name="BIT_RULER_TENS_LOWTOHIGH" xml:space="preserve">
    <value>          1         2         3         4         5         6   </value>
    <comment>This is the tens row of a ruler for displaying above reversed (Low to High)  bit masks This string contains exactly 64 characters, as does the corresponding units string.</comment>
  </data>
  <data name="BIT_RULER_UNITS_HIGHTOLOW" xml:space="preserve">
    <value>3210987654321098765432109876543210987654321098765432109876543210</value>
    <comment>This is the units row of a ruler for displaying above normal (High to Low) bit masks. This string contains exactly 64 characters, as does the corresponding tens string.</comment>
  </data>
  <data name="BIT_RULER_UNITS_LOW2HIGH" xml:space="preserve">
    <value>0123456789012345678901234567890123456789012345678901234567890123</value>
    <comment>This is the units row of a ruler for displaying above reversed (Low to High)  bit masks. This string contains exactly 64 characters, as does the corresponding tens string.</comment>
  </data>
  <data name="ERRMSG_BIT_COUNT_OUT_OF_RANGE" xml:space="preserve">
    <value>Value must be greater than zero AND divisible by 8.</value>
    <comment>Message used by pintBitCount ArgumentOutOfRange exception</comment>
  </data>
  <data name="ERRMSG_BIT_GROUPSIZE_MUST_BE_NUMERIC" xml:space="preserve">
    <value>The Bits per Group value must be numeric. The specified value is {1}{0}{1}.</value>
    <comment>Message used by ParseFormatString to report an invalid Bits per Group value.</comment>
  </data>
  <data name="ERRMSG_BIT_GROUPSIZE_OUT_OF_RANGE" xml:space="preserve">
    <value>The Bits per Group value must be greater than zero.</value>
    <comment>Message used by pintBitGroupSize ArgumentOutOfRange exception</comment>
  </data>
  <data name="ERRMSG_BIT_GROUPS_LESS_THAN_ZERO" xml:space="preserve">
    <value>Value most be greater than or equal to zero.</value>
    <comment>Message used by FormattingParameters constructor to report an invalid bit group count.</comment>
  </data>
  <data name="ERRMSG_ENRICED_FORMAT_EXCEPTION" xml:space="preserve">
    <value>An FormatException exception was caught in the Format method on an instance of the BitMaskFormat class.{2}    Format String    = {0}{2}Object to Format = {1}</value>
    <comment>The Format method on an instance of BitMaskFormat constructs an enhanced FormatException exception message from this template.</comment>
  </data>
  <data name="ERRMSG_INVALID_BIT_GROUPSIZE" xml:space="preserve">
    <value>The Bits per Group value must be evenly divisible by {0}. The specified value was {1}.</value>
    <comment>Message used by pintBitGroupSize ArgumentOutOfRange exception</comment>
  </data>
  <data name="ERRMSG_INVALID_FORMAT_PREFIX_ENUM" xml:space="preserve">
    <value>Error in WizardWrx.BitHelpers.FormatBitMask: internal variable fpFormattingParams.FormatPrefix in invalid. The actual value is {0}.</value>
    <comment>Message reported via Debug.Fail and returned by FormatBitMask to report an invalid FormatPrefix value.</comment>
  </data>
  <data name="ERRMSG_INVALID_RULER_STRING" xml:space="preserve">
    <value>The ruler string length is incorrect.{2}    Expected length = {0}{2}    Actual length   = {1}</value>
    <comment>This is the template from which private static method TrimRuler reports that the length of the specified ruler string is invalid.</comment>
  </data>
  <data name="ERRMSG_TYPE_MUST_BE_INTEGERAL" xml:space="preserve">
    <value>Only integeral types are supported.</value>
    <comment>Message used by ptypIntegerType ArgumentException exception</comment>
  </data>
</root>